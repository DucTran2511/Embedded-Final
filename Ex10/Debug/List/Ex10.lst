
AVRASM ver. 2.1.30  C:\Code\Ex10\Debug\List\Ex10.asm Sat Dec 21 22:20:11 2024

C:\Code\Ex10\Debug\List\Ex10.asm(1090): warning: Register r5 already defined by the .DEF directive
C:\Code\Ex10\Debug\List\Ex10.asm(1091): warning: Register r4 already defined by the .DEF directive
C:\Code\Ex10\Debug\List\Ex10.asm(1092): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 008b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
00004f 0000
000050 0001
000051 0002
000052 0003      	.DB  0x0,0x0,0x1,0x0,0x2,0x0,0x3,0x0
000053 0004
000054 0005
000055 0006
000056 0007      	.DB  0x4,0x0,0x5,0x0,0x6,0x0,0x7,0x0
C:\Code\Ex10\Debug\List\Ex10.asm(1146): warning: .cseg .db misalignment - padding zero byte
000057 0008      	.DB  0x8
                 _0x4:
000058 3031
C:\Code\Ex10\Debug\List\Ex10.asm(1148): warning: .cseg .db misalignment - padding zero byte
000059 0038      	.DB  0x31,0x30,0x38
                 _0x0:
00005a 002a
00005b 614d
00005c 2074
00005d 686b      	.DB  0x2A,0x0,0x4D,0x61,0x74,0x20,0x6B,0x68
00005e 7561
00005f 6420
000060 6e75
000061 2167      	.DB  0x61,0x75,0x20,0x64,0x75,0x6E,0x67,0x21
000062 4d00
000063 7461
000064 6b20
000065 6168      	.DB  0x0,0x4D,0x61,0x74,0x20,0x6B,0x68,0x61
000066 2075
000067 6173
000068 2169
000069 4e00      	.DB  0x75,0x20,0x73,0x61,0x69,0x21,0x0,0x4E
00006a 6168
00006b 2070
00006c 616d
00006d 2074      	.DB  0x68,0x61,0x70,0x20,0x6D,0x61,0x74,0x20
00006e 686b
00006f 7561
000070 003a      	.DB  0x6B,0x68,0x61,0x75,0x3A,0x0
                 _0x2000003:
000071 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000072 0011      	.DW  0x11
000073 0530      	.DW  _keypad
000074 009e      	.DW  _0x3*2
                 
000075 0003      	.DW  0x03
000076 0546      	.DW  _correct_password
000077 00b0      	.DW  _0x4*2
                 
000078 0002      	.DW  0x02
000079 0500      	.DW  _0x1A
00007a 00b4      	.DW  _0x0*2
                 
00007b 0002      	.DW  0x02
00007c 0502      	.DW  _0x1A+2
00007d 00b4      	.DW  _0x0*2
                 
00007e 000f      	.DW  0x0F
00007f 0504      	.DW  _0x1C
000080 00b6      	.DW  _0x0*2+2
                 
000081 000e      	.DW  0x0E
000082 0513      	.DW  _0x1D
000083 00c5      	.DW  _0x0*2+17
                 
000084 000f      	.DW  0x0F
000085 0521      	.DW  _0x26
000086 00d3      	.DW  _0x0*2+31
                 
000087 0002      	.DW  0x02
000088 054a      	.DW  __base_y_G100
000089 00e2      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00008a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00008b 94f8      	CLI
00008c 27ee      	CLR  R30
00008d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00008e e0f1      	LDI  R31,1
00008f bff5      	OUT  MCUCR,R31
000090 bfe5      	OUT  MCUCR,R30
000091 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000093 e08d      	LDI  R24,(14-2)+1
000094 e0a2      	LDI  R26,2
000095 27bb      	CLR  R27
                 __CLEAR_REG:
000096 93ed      	ST   X+,R30
000097 958a      	DEC  R24
000098 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000099 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00009a e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00009b e0a0      	LDI  R26,LOW(__SRAM_START)
00009c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00009d 93ed      	ST   X+,R30
00009e 9701      	SBIW R24,1
00009f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000a0 eee4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a1 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000a2 9185      	LPM  R24,Z+
0000a3 9195      	LPM  R25,Z+
0000a4 9700      	SBIW R24,0
0000a5 f061      	BREQ __GLOBAL_INI_END
0000a6 91a5      	LPM  R26,Z+
0000a7 91b5      	LPM  R27,Z+
0000a8 9005      	LPM  R0,Z+
0000a9 9015      	LPM  R1,Z+
0000aa 01bf      	MOVW R22,R30
0000ab 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ac 9005      	LPM  R0,Z+
0000ad 920d      	ST   X+,R0
0000ae 9701      	SBIW R24,1
0000af f7e1      	BRNE __GLOBAL_INI_LOOP
0000b0 01fb      	MOVW R30,R22
0000b1 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000b2 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000b3 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000b4 bfed      	OUT  SPL,R30
0000b5 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000b6 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000b7 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000b8 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000b9 940c 0165 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * Ex10.c
                 ; *
                 ; * Created: 12/21/2024 10:18:51 PM
                 ; * Author: ADMIN
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdint.h>
                 ;#include <stdio.h>
                 ;
                 ;int keypad[3][3] = {0, 1, 2, 3, 4, 5, 6, 7, 8}; // ma tran ban phim
                 
                 	.DSEG
                 ;char input_password[4]; // Luu mat khau nhap tu ban phim
                 ;char correct_password[4] = "108"; // Mat khau dung
                 ;
                 ;void BUTTON() {
                 ; 0000 0012 void BUTTON() {
                 
                 	.CSEG
                 _BUTTON:
                 ; .FSTART _BUTTON
                 ; 0000 0013     int i, j, index = 0;
                 ; 0000 0014     while (index < 3) { // Nhap 3 ki tu
0000bb 940e 025a 	CALL __SAVELOCR6
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	index -> R20,R21
                +
0000bd e040     +LDI R20 , LOW ( 0 )
0000be e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x5:
                +
0000bf 3043     +CPI R20 , LOW ( 3 )
0000c0 e0e0     +LDI R30 , HIGH ( 3 )
0000c1 075e     +CPC R21 , R30
                 	__CPWRN 20,21,3
0000c2 f00c      	BRLT PC+2
0000c3 c067      	RJMP _0x7
                 ; 0000 0015         for (j = 0; j < 3; j++) {
                +
0000c4 e020     +LDI R18 , LOW ( 0 )
0000c5 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x9:
                +
0000c6 3023     +CPI R18 , LOW ( 3 )
0000c7 e0e0     +LDI R30 , HIGH ( 3 )
0000c8 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
0000c9 f00c      	BRLT PC+2
0000ca c052      	RJMP _0xA
                 ; 0000 0016             if (j == 0) PORTF = 0b11111101;
0000cb 2e02      	MOV  R0,R18
0000cc 2a03      	OR   R0,R19
0000cd f419      	BRNE _0xB
0000ce efed      	LDI  R30,LOW(253)
0000cf 93e0 0062 	STS  98,R30
                 ; 0000 0017             if (j == 1) PORTF = 0b11110111;
                 _0xB:
0000d1 e0e1      	LDI  R30,LOW(1)
0000d2 e0f0      	LDI  R31,HIGH(1)
0000d3 17e2      	CP   R30,R18
0000d4 07f3      	CPC  R31,R19
0000d5 f419      	BRNE _0xC
0000d6 efe7      	LDI  R30,LOW(247)
0000d7 93e0 0062 	STS  98,R30
                 ; 0000 0018             if (j == 2) PORTF = 0b11011111;
                 _0xC:
0000d9 e0e2      	LDI  R30,LOW(2)
0000da e0f0      	LDI  R31,HIGH(2)
0000db 17e2      	CP   R30,R18
0000dc 07f3      	CPC  R31,R19
0000dd f419      	BRNE _0xD
0000de edef      	LDI  R30,LOW(223)
0000df 93e0 0062 	STS  98,R30
                 ; 0000 0019             for (i = 0; i < 3; i++) {
                 _0xD:
                +
0000e1 e000     +LDI R16 , LOW ( 0 )
0000e2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xF:
                +
0000e3 3003     +CPI R16 , LOW ( 3 )
0000e4 e0e0     +LDI R30 , HIGH ( 3 )
0000e5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3
0000e6 f59c      	BRGE _0x10
                 ; 0000 001A                 if ((i == 0 && PINF.2 == 0) ||
                 ; 0000 001B                     (i == 1 && PINF.4 == 0) ||
                 ; 0000 001C                     (i == 2 && PINF.0 == 0)) {
0000e7 2400      	CLR  R0
0000e8 1600      	CP   R0,R16
0000e9 0601      	CPC  R0,R17
0000ea f411      	BRNE _0x12
0000eb 9b02      	SBIS 0x0,2
0000ec c00f      	RJMP _0x14
                 _0x12:
0000ed e0e1      	LDI  R30,LOW(1)
0000ee e0f0      	LDI  R31,HIGH(1)
0000ef 17e0      	CP   R30,R16
0000f0 07f1      	CPC  R31,R17
0000f1 f411      	BRNE _0x15
0000f2 9b04      	SBIS 0x0,4
0000f3 c008      	RJMP _0x14
                 _0x15:
0000f4 e0e2      	LDI  R30,LOW(2)
0000f5 e0f0      	LDI  R31,HIGH(2)
0000f6 17e0      	CP   R30,R16
0000f7 07f1      	CPC  R31,R17
0000f8 f411      	BRNE _0x17
0000f9 9b00      	SBIS 0x0,0
0000fa c001      	RJMP _0x14
                 _0x17:
0000fb c01b      	RJMP _0x11
                 _0x14:
                 ; 0000 001D                     input_password[index] = keypad[i][j] + '0'; // Luu ki tu nhap vao
0000fc 01fa      	MOVW R30,R20
0000fd 5bee      	SUBI R30,LOW(-_input_password)
0000fe 4ffa      	SBCI R31,HIGH(-_input_password)
0000ff 01bf      	MOVW R22,R30
                +
000100 e0a6     +LDI R26 , 6
000101 9fa0     +MUL R26 , R16
000102 01f0     +MOVW R30 , R0
000103 9fa1     +MUL R26 , R17
000104 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,6
000105 5de0      	SUBI R30,LOW(-_keypad)
000106 4ffa      	SBCI R31,HIGH(-_keypad)
000107 01df      	MOVW R26,R30
000108 01f9      	MOVW R30,R18
000109 0fee      	LSL  R30
00010a 1fff      	ROL  R31
00010b 0fae      	ADD  R26,R30
00010c 1fbf      	ADC  R27,R31
00010d 91ec      	LD   R30,X
00010e 5de0      	SUBI R30,-LOW(48)
00010f 01db      	MOVW R26,R22
000110 940e 0225 	CALL SUBOPT_0x0
                 ; 0000 001E                     lcd_gotoxy(index, 1);
                 ; 0000 001F                     lcd_putchar(input_password[index]);
                 ; 0000 0020                     delay_ms(300);
                 ; 0000 0021                     lcd_gotoxy(index, 1);
                 ; 0000 0022                     lcd_puts("*"); // Hien thi dau *
                +
000112 e0a0     +LDI R26 , LOW ( _0x1A + ( 0 ) )
000113 e0b5     +LDI R27 , HIGH ( _0x1A + ( 0 ) )
                 	__POINTW2MN _0x1A,0
000114 940e 0239 	CALL SUBOPT_0x1
                 ; 0000 0023                     delay_ms(500);
                 ; 0000 0024                     index++;
                 ; 0000 0025                     break;
000116 c003      	RJMP _0x10
                 ; 0000 0026                 }
                 ; 0000 0027             }
                 _0x11:
                +
000117 5f0f     +SUBI R16 , LOW ( - 1 )
000118 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000119 cfc9      	RJMP _0xF
                 _0x10:
                 ; 0000 0028         }
                +
00011a 5f2f     +SUBI R18 , LOW ( - 1 )
00011b 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00011c cfa9      	RJMP _0x9
                 _0xA:
                 ; 0000 0029         // Xu ly BT2 la so 9
                 ; 0000 002A         if (PINB.3 == 0) {
00011d 99b3      	SBIC 0x16,3
00011e c00b      	RJMP _0x1B
                 ; 0000 002B             input_password[index] = '9';
00011f e4a2      	LDI  R26,LOW(_input_password)
000120 e0b5      	LDI  R27,HIGH(_input_password)
000121 0fa4      	ADD  R26,R20
000122 1fb5      	ADC  R27,R21
000123 e3e9      	LDI  R30,LOW(57)
000124 940e 0225 	CALL SUBOPT_0x0
                 ; 0000 002C             lcd_gotoxy(index, 1);
                 ; 0000 002D             lcd_putchar(input_password[index]);
                 ; 0000 002E             delay_ms(300);
                 ; 0000 002F             lcd_gotoxy(index, 1);
                 ; 0000 0030             lcd_puts("*");
                +
000126 e0a2     +LDI R26 , LOW ( _0x1A + ( 2 ) )
000127 e0b5     +LDI R27 , HIGH ( _0x1A + ( 2 ) )
                 	__POINTW2MN _0x1A,2
000128 940e 0239 	CALL SUBOPT_0x1
                 ; 0000 0031             delay_ms(500);
                 ; 0000 0032             index++;
                 ; 0000 0033         }
                 ; 0000 0034     }
                 _0x1B:
00012a cf94      	RJMP _0x5
                 _0x7:
                 ; 0000 0035     input_password[3] = '\0'; // Ket thuc chuoi
00012b e0e0      	LDI  R30,LOW(0)
                +
00012c 93e0 0545+STS _input_password + ( 3 ) , R30
                 	__PUTB1MN _input_password,3
                 ; 0000 0036 }
00012e 940e 0261 	CALL __LOADLOCR6
000130 9626      	ADIW R28,6
000131 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x1A:
000500           	.BYTE 0x4
                 ;
                 ;void handle_correct_password() {
                 ; 0000 0038 void handle_correct_password() {
                 
                 	.CSEG
                 _handle_correct_password:
                 ; .FSTART _handle_correct_password
                 ; 0000 0039     lcd_clear();
000132 d091      	RCALL _lcd_clear
                 ; 0000 003A     lcd_puts("Mat khau dung!");
                +
000133 e0a4     +LDI R26 , LOW ( _0x1C + ( 0 ) )
000134 e0b5     +LDI R27 , HIGH ( _0x1C + ( 0 ) )
                 	__POINTW2MN _0x1C,0
000135 c003      	RJMP _0x2080002
                 ; 0000 003B     delay_ms(2000);
                 ; 0000 003C }
                 ; .FEND
                 
                 	.DSEG
                 _0x1C:
000504           	.BYTE 0xF
                 ;
                 ;void handle_wrong_password() {
                 ; 0000 003E void handle_wrong_password() {
                 
                 	.CSEG
                 _handle_wrong_password:
                 ; .FSTART _handle_wrong_password
                 ; 0000 003F     lcd_clear();
000136 d08d      	RCALL _lcd_clear
                 ; 0000 0040     lcd_puts("Mat khau sai!");
                +
000137 e1a3     +LDI R26 , LOW ( _0x1D + ( 0 ) )
000138 e0b5     +LDI R27 , HIGH ( _0x1D + ( 0 ) )
                 	__POINTW2MN _0x1D,0
                 _0x2080002:
000139 d0ab      	RCALL _lcd_puts
                 ; 0000 0041     delay_ms(2000);
00013a eda0      	LDI  R26,LOW(2000)
00013b e0b7      	LDI  R27,HIGH(2000)
00013c 940e 0250 	CALL _delay_ms
                 ; 0000 0042 }
00013e 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x1D:
000513           	.BYTE 0xE
                 ;
                 ;int my_strcmp(const char *str1, const char *str2) {
                 ; 0000 0044 int my_strcmp(const char *str1, const char *str2) {
                 
                 	.CSEG
                 _my_strcmp:
                 ; .FSTART _my_strcmp
                 ; 0000 0045     while (*str1 && (*str1 == *str2)) {
00013f 93ba      	ST   -Y,R27
000140 93aa      	ST   -Y,R26
                 ;	*str1 -> Y+2
                 ;	*str2 -> Y+0
                 _0x1E:
000141 81aa      	LDD  R26,Y+2
000142 81bb      	LDD  R27,Y+2+1
000143 91ec      	LD   R30,X
000144 30e0      	CPI  R30,0
000145 f031      	BREQ _0x21
000146 900c      	LD   R0,X
000147 81a8      	LD   R26,Y
000148 81b9      	LDD  R27,Y+1
000149 91ec      	LD   R30,X
00014a 15e0      	CP   R30,R0
00014b f009      	BREQ _0x22
                 _0x21:
00014c c00b      	RJMP _0x20
                 _0x22:
                 ; 0000 0046         str1++;
00014d 81ea      	LDD  R30,Y+2
00014e 81fb      	LDD  R31,Y+2+1
00014f 9631      	ADIW R30,1
000150 83ea      	STD  Y+2,R30
000151 83fb      	STD  Y+2+1,R31
                 ; 0000 0047         str2++;
000152 81e8      	LD   R30,Y
000153 81f9      	LDD  R31,Y+1
000154 9631      	ADIW R30,1
000155 83e8      	ST   Y,R30
000156 83f9      	STD  Y+1,R31
                 ; 0000 0048     }
000157 cfe9      	RJMP _0x1E
                 _0x20:
                 ; 0000 0049     return *(unsigned char *)str1 - *(unsigned char *)str2;
000158 81aa      	LDD  R26,Y+2
000159 81bb      	LDD  R27,Y+2+1
00015a 900c      	LD   R0,X
00015b 2411      	CLR  R1
00015c 81a8      	LD   R26,Y
00015d 81b9      	LDD  R27,Y+1
00015e 91ac      	LD   R26,X
00015f 27bb      	CLR  R27
000160 01f0      	MOVW R30,R0
000161 1bea      	SUB  R30,R26
000162 0bfb      	SBC  R31,R27
000163 9624      	ADIW R28,4
000164 9508      	RET
                 ; 0000 004A }
                 ; .FEND
                 ;
                 ;void main() {
                 ; 0000 004C void main() {
                 _main:
                 ; .FSTART _main
                 ; 0000 004D     lcd_init(16);
000165 e1a0      	LDI  R26,LOW(16)
000166 d08f      	RCALL _lcd_init
                 ; 0000 004E     DDRF = 0b11101010; // Cai dat huong nhap xuat cho ban phim ma tran
000167 eeea      	LDI  R30,LOW(234)
000168 93e0 0061 	STS  97,R30
                 ; 0000 004F     PORTF = 0b00010101; // Keo len muc cao cho cac hang
00016a e1e5      	LDI  R30,LOW(21)
00016b 93e0 0062 	STS  98,R30
                 ; 0000 0050     DDRB &= ~(1 << 3); // BT2 la dau vao (PB3)
00016d 98bb      	CBI  0x17,3
                 ; 0000 0051     PORTB |= (1 << 3); // Keo len muc cao cho PB3
00016e 9ac3      	SBI  0x18,3
                 ; 0000 0052 
                 ; 0000 0053     while (1) {
                 _0x23:
                 ; 0000 0054         lcd_clear();
00016f d054      	RCALL _lcd_clear
                 ; 0000 0055         lcd_puts("Nhap mat khau:");
                +
000170 e2a1     +LDI R26 , LOW ( _0x26 + ( 0 ) )
000171 e0b5     +LDI R27 , HIGH ( _0x26 + ( 0 ) )
                 	__POINTW2MN _0x26,0
000172 d072      	RCALL _lcd_puts
                 ; 0000 0056         lcd_gotoxy(0, 1);
000173 e0e0      	LDI  R30,LOW(0)
000174 93ea      	ST   -Y,R30
000175 e0a1      	LDI  R26,LOW(1)
000176 d040      	RCALL _lcd_gotoxy
                 ; 0000 0057         BUTTON(); // Nhan mat khau
000177 df43      	RCALL _BUTTON
                 ; 0000 0058         if (my_strcmp(input_password, correct_password) == 0) {
000178 e4e2      	LDI  R30,LOW(_input_password)
000179 e0f5      	LDI  R31,HIGH(_input_password)
00017a 93fa      	ST   -Y,R31
00017b 93ea      	ST   -Y,R30
00017c e4a6      	LDI  R26,LOW(_correct_password)
00017d e0b5      	LDI  R27,HIGH(_correct_password)
00017e dfc0      	RCALL _my_strcmp
00017f 9730      	SBIW R30,0
000180 f411      	BRNE _0x27
                 ; 0000 0059             handle_correct_password();
000181 dfb0      	RCALL _handle_correct_password
                 ; 0000 005A         } else {
000182 c001      	RJMP _0x28
                 _0x27:
                 ; 0000 005B             handle_wrong_password();
000183 dfb2      	RCALL _handle_wrong_password
                 ; 0000 005C         }
                 _0x28:
                 ; 0000 005D     }
000184 cfea      	RJMP _0x23
                 ; 0000 005E }
                 _0x29:
000185 cfff      	RJMP _0x29
                 ; .FEND
                 
                 	.DSEG
                 _0x26:
000521           	.BYTE 0xF
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000186 93aa      	ST   -Y,R26
000187 81e8      	LD   R30,Y
000188 71e0      	ANDI R30,LOW(0x10)
000189 f011      	BREQ _0x2000004
00018a 9adb      	SBI  0x1B,3
00018b c001      	RJMP _0x2000005
                 _0x2000004:
00018c 98db      	CBI  0x1B,3
                 _0x2000005:
00018d 81e8      	LD   R30,Y
00018e 72e0      	ANDI R30,LOW(0x20)
00018f f011      	BREQ _0x2000006
000190 9adc      	SBI  0x1B,4
000191 c001      	RJMP _0x2000007
                 _0x2000006:
000192 98dc      	CBI  0x1B,4
                 _0x2000007:
000193 81e8      	LD   R30,Y
000194 74e0      	ANDI R30,LOW(0x40)
000195 f011      	BREQ _0x2000008
000196 9add      	SBI  0x1B,5
000197 c001      	RJMP _0x2000009
                 _0x2000008:
000198 98dd      	CBI  0x1B,5
                 _0x2000009:
000199 81e8      	LD   R30,Y
00019a 78e0      	ANDI R30,LOW(0x80)
00019b f011      	BREQ _0x200000A
00019c 9ade      	SBI  0x1B,6
00019d c001      	RJMP _0x200000B
                 _0x200000A:
00019e 98de      	CBI  0x1B,6
                 _0x200000B:
                +
00019f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001a0 958a     +DEC R24
0001a1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001a2 9ada      	SBI  0x1B,2
                +
0001a3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001a4 958a     +DEC R24
0001a5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001a6 98da      	CBI  0x1B,2
                +
0001a7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001a8 958a     +DEC R24
0001a9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001aa c078      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001ab 93aa      	ST   -Y,R26
0001ac 81a8      	LD   R26,Y
0001ad dfd8      	RCALL __lcd_write_nibble_G100
0001ae 81e8          ld    r30,y
0001af 95e2          swap  r30
0001b0 83e8          st    y,r30
0001b1 81a8      	LD   R26,Y
0001b2 dfd3      	RCALL __lcd_write_nibble_G100
                +
0001b3 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001b4 958a     +DEC R24
0001b5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001b6 c06c      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001b7 93aa      	ST   -Y,R26
0001b8 81e8      	LD   R30,Y
0001b9 e0f0      	LDI  R31,0
0001ba 5be6      	SUBI R30,LOW(-__base_y_G100)
0001bb 4ffa      	SBCI R31,HIGH(-__base_y_G100)
0001bc 81e0      	LD   R30,Z
0001bd 81a9      	LDD  R26,Y+1
0001be 0fae      	ADD  R26,R30
0001bf dfeb      	RCALL __lcd_write_data
0001c0 8059      	LDD  R5,Y+1
0001c1 8048      	LDD  R4,Y+0
0001c2 9622      	ADIW R28,2
0001c3 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001c4 e0a2      	LDI  R26,LOW(2)
0001c5 940e 0242 	CALL SUBOPT_0x2
0001c7 e0ac      	LDI  R26,LOW(12)
0001c8 dfe2      	RCALL __lcd_write_data
0001c9 e0a1      	LDI  R26,LOW(1)
0001ca 940e 0242 	CALL SUBOPT_0x2
0001cc e0e0      	LDI  R30,LOW(0)
0001cd 2e4e      	MOV  R4,R30
0001ce 2e5e      	MOV  R5,R30
0001cf 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001d0 93aa      	ST   -Y,R26
0001d1 81a8      	LD   R26,Y
0001d2 30aa      	CPI  R26,LOW(0xA)
0001d3 f011      	BREQ _0x2000011
0001d4 1457      	CP   R5,R7
0001d5 f048      	BRLO _0x2000010
                 _0x2000011:
0001d6 e0e0      	LDI  R30,LOW(0)
0001d7 93ea      	ST   -Y,R30
0001d8 9443      	INC  R4
0001d9 2da4      	MOV  R26,R4
0001da dfdc      	RCALL _lcd_gotoxy
0001db 81a8      	LD   R26,Y
0001dc 30aa      	CPI  R26,LOW(0xA)
0001dd f409      	BRNE _0x2000013
0001de c044      	RJMP _0x2080001
                 _0x2000013:
                 _0x2000010:
0001df 9453      	INC  R5
0001e0 9ad8      	SBI  0x1B,0
0001e1 81a8      	LD   R26,Y
0001e2 dfc8      	RCALL __lcd_write_data
0001e3 98d8      	CBI  0x1B,0
0001e4 c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001e5 93ba      	ST   -Y,R27
0001e6 93aa      	ST   -Y,R26
0001e7 931a      	ST   -Y,R17
                 _0x2000014:
0001e8 81a9      	LDD  R26,Y+1
0001e9 81ba      	LDD  R27,Y+1+1
0001ea 91ed      	LD   R30,X+
0001eb 83a9      	STD  Y+1,R26
0001ec 83ba      	STD  Y+1+1,R27
0001ed 2f1e      	MOV  R17,R30
0001ee 30e0      	CPI  R30,0
0001ef f019      	BREQ _0x2000016
0001f0 2fa1      	MOV  R26,R17
0001f1 dfde      	RCALL _lcd_putchar
0001f2 cff5      	RJMP _0x2000014
                 _0x2000016:
0001f3 8118      	LDD  R17,Y+0
0001f4 9623      	ADIW R28,3
0001f5 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001f6 93aa      	ST   -Y,R26
0001f7 9ad3      	SBI  0x1A,3
0001f8 9ad4      	SBI  0x1A,4
0001f9 9ad5      	SBI  0x1A,5
0001fa 9ad6      	SBI  0x1A,6
0001fb 9ad2      	SBI  0x1A,2
0001fc 9ad0      	SBI  0x1A,0
0001fd 9ad1      	SBI  0x1A,1
0001fe 98da      	CBI  0x1B,2
0001ff 98d8      	CBI  0x1B,0
000200 98d9      	CBI  0x1B,1
000201 8078      	LDD  R7,Y+0
000202 81e8      	LD   R30,Y
000203 58e0      	SUBI R30,-LOW(128)
                +
000204 93e0 054c+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000206 81e8      	LD   R30,Y
000207 54e0      	SUBI R30,-LOW(192)
                +
000208 93e0 054d+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00020a e1a4      	LDI  R26,LOW(20)
00020b e0b0      	LDI  R27,0
00020c 940e 0250 	CALL _delay_ms
00020e 940e 0248 	CALL SUBOPT_0x3
000210 940e 0248 	CALL SUBOPT_0x3
000212 940e 0248 	CALL SUBOPT_0x3
000214 e2a0      	LDI  R26,LOW(32)
000215 df70      	RCALL __lcd_write_nibble_G100
                +
000216 ec88     +LDI R24 , LOW ( 200 )
000217 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000218 9701     +SBIW R24 , 1
000219 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00021a e2a8      	LDI  R26,LOW(40)
00021b df8f      	RCALL __lcd_write_data
00021c e0a4      	LDI  R26,LOW(4)
00021d df8d      	RCALL __lcd_write_data
00021e e8a5      	LDI  R26,LOW(133)
00021f df8b      	RCALL __lcd_write_data
000220 e0a6      	LDI  R26,LOW(6)
000221 df89      	RCALL __lcd_write_data
000222 dfa1      	RCALL _lcd_clear
                 _0x2080001:
000223 9621      	ADIW R28,1
000224 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
000530           	.BYTE 0x12
                 _input_password:
000542           	.BYTE 0x4
                 _correct_password:
000546           	.BYTE 0x4
                 __base_y_G100:
00054a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x0:
000225 93ec      	ST   X,R30
000226 934a      	ST   -Y,R20
000227 e0a1      	LDI  R26,LOW(1)
000228 940e 01b7 	CALL _lcd_gotoxy
00022a e4a2      	LDI  R26,LOW(_input_password)
00022b e0b5      	LDI  R27,HIGH(_input_password)
00022c 0fa4      	ADD  R26,R20
00022d 1fb5      	ADC  R27,R21
00022e 91ac      	LD   R26,X
00022f 940e 01d0 	CALL _lcd_putchar
000231 e2ac      	LDI  R26,LOW(300)
000232 e0b1      	LDI  R27,HIGH(300)
000233 940e 0250 	CALL _delay_ms
000235 934a      	ST   -Y,R20
000236 e0a1      	LDI  R26,LOW(1)
000237 940c 01b7 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000239 940e 01e5 	CALL _lcd_puts
00023b efa4      	LDI  R26,LOW(500)
00023c e0b1      	LDI  R27,HIGH(500)
00023d 940e 0250 	CALL _delay_ms
                +
00023f 5f4f     +SUBI R20 , LOW ( - 1 )
000240 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000241 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000242 940e 01ab 	CALL __lcd_write_data
000244 e0a3      	LDI  R26,LOW(3)
000245 e0b0      	LDI  R27,0
000246 940c 0250 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
000248 e3a0      	LDI  R26,LOW(48)
000249 940e 0186 	CALL __lcd_write_nibble_G100
                +
00024b ec88     +LDI R24 , LOW ( 200 )
00024c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00024d 9701     +SBIW R24 , 1
00024e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00024f 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000250 9610      	adiw r26,0
000251 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000252 ed80     +LDI R24 , LOW ( 0x7D0 )
000253 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000254 9701     +SBIW R24 , 1
000255 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000256 95a8      	wdr
000257 9711      	sbiw r26,1
000258 f7c9      	brne __delay_ms0
                 __delay_ms1:
000259 9508      	ret
                 
                 __SAVELOCR6:
00025a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00025b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00025c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00025d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00025e 931a      	ST   -Y,R17
00025f 930a      	ST   -Y,R16
000260 9508      	RET
                 
                 __LOADLOCR6:
000261 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000262 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000263 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000264 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000265 8119      	LDD  R17,Y+1
000266 8108      	LD   R16,Y
000267 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  15 r1 :   2 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   9 r17:  13 r18:   9 r19:   8 r20:  10 r21:   7 r22:   4 r23:   0 
r24:  22 r25:   5 r26:  66 r27:  29 r28:   6 r29:   1 r30:  99 r31:  25 
x  :  12 y  :  67 z  :   8 
Registers used: 23 out of 35 (65.7%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   5 
adiw  :   8 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  10 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   2 brmi  :   0 brne  :  19 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  20 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   8 cpi   :   7 cpse  :   0 dec   :   5 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   0 inc   :   2 jmp   :  38 ld    :  26 ldd   :  21 
ldi   :  93 lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   6 
movw  :  10 mul   :   2 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   1 ori   :   0 out   :   6 pop   :   0 push  :   0 rcall :  24 
ret   :  12 reti  :   0 rjmp  :  27 rol   :   1 ror   :   0 sbc   :   1 
sbci  :   6 sbi   :  14 sbic  :   1 sbis  :   3 sbiw  :   8 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  28 std   :   5 sts   :   9 sub   :   1 subi  :   9 
swap  :   1 tst   :   0 wdr   :   1 
Instructions used: 46 out of 117 (39.3%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004d0   1094    138   1232  131072   0.9%
[.dseg] 0x000100 0x00054e      0     78     78    4096   1.9%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 5 warnings
