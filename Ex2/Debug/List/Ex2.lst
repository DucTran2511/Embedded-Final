
AVRASM ver. 2.1.30  C:\Code\Ex2\Debug\List\Ex2.asm Fri Dec 20 20:49:32 2024

C:\Code\Ex2\Debug\List\Ex2.asm(1090): warning: Register r4 already defined by the .DEF directive
C:\Code\Ex2\Debug\List\Ex2.asm(1091): warning: Register r5 already defined by the .DEF directive
C:\Code\Ex2\Debug\List\Ex2.asm(1092): warning: Register r7 already defined by the .DEF directive
C:\Code\Ex2\Debug\List\Ex2.asm(1093): warning: Register r6 already defined by the .DEF directive
C:\Code\Ex2\Debug\List\Ex2.asm(1094): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _curSpeed=R4
                 	.DEF _curSpeed_msb=R5
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004f 0000      	.DB  0x0,0x0
                 
                 _0x0:
000050 4144
000051 474e
000052 5320
000053 5941      	.DB  0x44,0x41,0x4E,0x47,0x20,0x53,0x41,0x59
000054 4500
000055 646e
000056 5300
000057 6174      	.DB  0x0,0x45,0x6E,0x64,0x0,0x53,0x74,0x61
000058 7472
C:\Code\Ex2\Debug\List\Ex2.asm(1152): warning: .cseg .db misalignment - padding zero byte
000059 0000      	.DB  0x72,0x74,0x0
                 _0x2020003:
00005a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00005b 0002      	.DW  0x02
00005c 0004      	.DW  0x04
00005d 009e      	.DW  __REG_VARS*2
                 
00005e 0009      	.DW  0x09
00005f 0500      	.DW  _0xD
000060 00a0      	.DW  _0x0*2
                 
000061 0004      	.DW  0x04
000062 0509      	.DW  _0xD+9
000063 00a9      	.DW  _0x0*2+9
                 
000064 0006      	.DW  0x06
000065 050d      	.DW  _0x14
000066 00ad      	.DW  _0x0*2+13
                 
000067 0002      	.DW  0x02
000068 0513      	.DW  __base_y_G101
000069 00b4      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00006a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006b 94f8      	CLI
00006c 27ee      	CLR  R30
00006d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006e e0f1      	LDI  R31,1
00006f bff5      	OUT  MCUCR,R31
000070 bfe5      	OUT  MCUCR,R30
000071 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000073 e08d      	LDI  R24,(14-2)+1
000074 e0a2      	LDI  R26,2
000075 27bb      	CLR  R27
                 __CLEAR_REG:
000076 93ed      	ST   X+,R30
000077 958a      	DEC  R24
000078 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000079 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007a e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007b e0a0      	LDI  R26,LOW(__SRAM_START)
00007c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00007d 93ed      	ST   X+,R30
00007e 9701      	SBIW R24,1
00007f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000080 ebe6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000081 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000082 9185      	LPM  R24,Z+
000083 9195      	LPM  R25,Z+
000084 9700      	SBIW R24,0
000085 f061      	BREQ __GLOBAL_INI_END
000086 91a5      	LPM  R26,Z+
000087 91b5      	LPM  R27,Z+
000088 9005      	LPM  R0,Z+
000089 9015      	LPM  R1,Z+
00008a 01bf      	MOVW R22,R30
00008b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00008c 9005      	LPM  R0,Z+
00008d 920d      	ST   X+,R0
00008e 9701      	SBIW R24,1
00008f f7e1      	BRNE __GLOBAL_INI_LOOP
000090 01fb      	MOVW R30,R22
000091 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000092 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000093 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000094 bfed      	OUT  SPL,R30
000095 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000096 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000097 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000098 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000099 940c 0106 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * Ex2.c
                 ; *
                 ; * Created: 12/20/2024 1:27:59 PM
                 ; * Author: ADMIN
                 ; */
                 ;
                 ;#include <stdio.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdbool.h>
                 ;#include <stdio.h>
                 ;#include <alcd.h>
                 ;#include <stdint.h>
                 ;
                 ;int curSpeed = 0;
                 ;
                 ;void display_messages(const char *message){
                 ; 0000 0011 void display_messages(const char *message){
                 
                 	.CSEG
                 _display_messages:
                 ; .FSTART _display_messages
                 ; 0000 0012     lcd_clear();
00009b 93ba      	ST   -Y,R27
00009c 93aa      	ST   -Y,R26
                 ;	*message -> Y+0
00009d 940e 016c 	CALL _lcd_clear
                 ; 0000 0013     lcd_gotoxy(0, 0);
00009f e0e0      	LDI  R30,LOW(0)
0000a0 93ea      	ST   -Y,R30
0000a1 e0a0      	LDI  R26,LOW(0)
0000a2 940e 015f 	CALL _lcd_gotoxy
                 ; 0000 0014     lcd_puts(message);
0000a4 81a8      	LD   R26,Y
0000a5 81b9      	LDD  R27,Y+1
0000a6 940e 018d 	CALL _lcd_puts
                 ; 0000 0015 }
0000a8 940c 016a 	JMP  _0x2080002
                 ; .FEND
                 ;
                 ;void adjustSpeed(int speed) {
                 ; 0000 0017 void adjustSpeed(int speed) {
                 _adjustSpeed:
                 ; .FSTART _adjustSpeed
                 ; 0000 0018     OCR0 = 255 - speed;
0000aa 93ba      	ST   -Y,R27
0000ab 93aa      	ST   -Y,R26
                 ;	speed -> Y+0
0000ac 81a8      	LD   R26,Y
0000ad efef      	LDI  R30,LOW(255)
0000ae 1bea      	SUB  R30,R26
0000af bfe1      	OUT  0x31,R30
                 ; 0000 0019 }
0000b0 940c 016a 	JMP  _0x2080002
                 ; .FEND
                 ;
                 ;int speedUpdater(int option) {
                 ; 0000 001B int speedUpdater(int option) {
                 _speedUpdater:
                 ; .FSTART _speedUpdater
                 ; 0000 001C     int newSpeed;
                 ; 0000 001D     int flag = 0;
                 ; 0000 001E     if (curSpeed == 0) {
0000b2 93ba      	ST   -Y,R27
0000b3 93aa      	ST   -Y,R26
0000b4 940e 0218 	CALL __SAVELOCR4
                 ;	option -> Y+4
                 ;	newSpeed -> R16,R17
                 ;	flag -> R18,R19
                +
0000b6 e020     +LDI R18 , LOW ( 0 )
0000b7 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0000b8 2c04      	MOV  R0,R4
0000b9 2805      	OR   R0,R5
0000ba f421      	BRNE _0x3
                 ; 0000 001F         curSpeed = 63;
0000bb e3ef      	LDI  R30,LOW(63)
0000bc e0f0      	LDI  R31,HIGH(63)
0000bd 012f      	MOVW R4,R30
                 ; 0000 0020     }
                 ; 0000 0021     else {
0000be c021      	RJMP _0x4
                 _0x3:
                 ; 0000 0022         if (option == 20)
0000bf 81ac      	LDD  R26,Y+4
0000c0 81bd      	LDD  R27,Y+4+1
0000c1 9754      	SBIW R26,20
0000c2 f441      	BRNE _0x5
                 ; 0000 0023             newSpeed = curSpeed + curSpeed / 5;
0000c3 01d2      	MOVW R26,R4
0000c4 e0e5      	LDI  R30,LOW(5)
0000c5 e0f0      	LDI  R31,HIGH(5)
0000c6 940e 0205 	CALL __DIVW21
0000c8 0de4      	ADD  R30,R4
0000c9 1df5      	ADC  R31,R5
0000ca c009      	RJMP _0x17
                 ; 0000 0024         else if (option == 100)
                 _0x5:
0000cb 81ac      	LDD  R26,Y+4
0000cc 81bd      	LDD  R27,Y+4+1
0000cd 36a4      	CPI  R26,LOW(0x64)
0000ce e0e0      	LDI  R30,HIGH(0x64)
0000cf 07be      	CPC  R27,R30
0000d0 f421      	BRNE _0x7
                 ; 0000 0025             newSpeed = curSpeed * 2;
0000d1 01f2      	MOVW R30,R4
0000d2 0fee      	LSL  R30
0000d3 1fff      	ROL  R31
                 _0x17:
0000d4 018f      	MOVW R16,R30
                 ; 0000 0026 
                 ; 0000 0027         if (newSpeed > 255){
                 _0x7:
                +
0000d5 3000     +CPI R16 , LOW ( 256 )
0000d6 e0e1     +LDI R30 , HIGH ( 256 )
0000d7 071e     +CPC R17 , R30
                 	__CPWRN 16,17,256
0000d8 f034      	BRLT _0x8
                 ; 0000 0028             curSpeed = 255;
0000d9 efef      	LDI  R30,LOW(255)
0000da e0f0      	LDI  R31,HIGH(255)
0000db 012f      	MOVW R4,R30
                 ; 0000 0029             flag += 1;
                +
0000dc 5f2f     +SUBI R18 , LOW ( - 1 )
0000dd 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 002A         }else{
0000de c001      	RJMP _0x9
                 _0x8:
                 ; 0000 002B             curSpeed = newSpeed;
0000df 0128      	MOVW R4,R16
                 ; 0000 002C         }
                 _0x9:
                 ; 0000 002D     }
                 _0x4:
                 ; 0000 002E     adjustSpeed(curSpeed);
0000e0 01d2      	MOVW R26,R4
0000e1 dfc8      	RCALL _adjustSpeed
                 ; 0000 002F     return flag;
0000e2 01f9      	MOVW R30,R18
0000e3 940e 021d 	CALL __LOADLOCR4
0000e5 9626      	ADIW R28,6
0000e6 9508      	RET
                 ; 0000 0030 }
                 ; .FEND
                 ;
                 ;
                 ;void dry(){
                 ; 0000 0033 void dry(){
                 _dry:
                 ; .FSTART _dry
                 ; 0000 0034     int flag = 0;
                 ; 0000 0035     while (1) {
0000e7 931a      	ST   -Y,R17
0000e8 930a      	ST   -Y,R16
                 ;	flag -> R16,R17
                +
0000e9 e000     +LDI R16 , LOW ( 0 )
0000ea e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xA:
                 ; 0000 0036         display_messages("DANG SAY");
                +
0000eb e0a0     +LDI R26 , LOW ( _0xD + ( 0 ) )
0000ec e0b5     +LDI R27 , HIGH ( _0xD + ( 0 ) )
                 	__POINTW2MN _0xD,0
0000ed dfad      	RCALL _display_messages
                 ; 0000 0037         flag = speedUpdater(20);
0000ee e1a4      	LDI  R26,LOW(20)
0000ef e0b0      	LDI  R27,0
0000f0 dfc1      	RCALL _speedUpdater
0000f1 018f      	MOVW R16,R30
                 ; 0000 0038         if (flag == 2)
0000f2 e0e2      	LDI  R30,LOW(2)
0000f3 e0f0      	LDI  R31,HIGH(2)
0000f4 17e0      	CP   R30,R16
0000f5 07f1      	CPC  R31,R17
0000f6 f029      	BREQ _0xC
                 ; 0000 0039             break;
                 ; 0000 003A         delay_ms(250);
0000f7 efaa      	LDI  R26,LOW(250)
0000f8 e0b0      	LDI  R27,0
0000f9 940e 01df 	CALL _delay_ms
                 ; 0000 003B     }
0000fb cfef      	RJMP _0xA
                 _0xC:
                 ; 0000 003C     curSpeed = 0;
0000fc 2444      	CLR  R4
0000fd 2455      	CLR  R5
                 ; 0000 003D     adjustSpeed(0);
0000fe 940e 01cd 	CALL SUBOPT_0x0
                 ; 0000 003E     display_messages("End");
                +
000100 e0a9     +LDI R26 , LOW ( _0xD + ( 9 ) )
000101 e0b5     +LDI R27 , HIGH ( _0xD + ( 9 ) )
                 	__POINTW2MN _0xD,9
000102 df98      	RCALL _display_messages
                 ; 0000 003F }
000103 9109      	LD   R16,Y+
000104 9119      	LD   R17,Y+
000105 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xD:
000500           	.BYTE 0xD
                 ;void main(void)
                 ; 0000 0041 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0042 bool state = true;
                 ; 0000 0043 DDRB = 0x10;
                 ;	state -> R17
000106 e011      	LDI  R17,1
000107 e1e0      	LDI  R30,LOW(16)
000108 bbe7      	OUT  0x17,R30
                 ; 0000 0044 PORTB = 0x04;
000109 e0e4      	LDI  R30,LOW(4)
00010a bbe8      	OUT  0x18,R30
                 ; 0000 0045 DDRD = 0x80;
00010b e8e0      	LDI  R30,LOW(128)
00010c bbe1      	OUT  0x11,R30
                 ; 0000 0046 PORTD = 0x80;
00010d bbe2      	OUT  0x12,R30
                 ; 0000 0047 ASSR=0<<AS0;
00010e e0e0      	LDI  R30,LOW(0)
00010f bfe0      	OUT  0x30,R30
                 ; 0000 0048 TCCR0=(1<<WGM00) | (1<<COM01) | (1<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
000110 e7e4      	LDI  R30,LOW(116)
000111 bfe3      	OUT  0x33,R30
                 ; 0000 0049 TCNT0=0x00;
000112 e0e0      	LDI  R30,LOW(0)
000113 bfe2      	OUT  0x32,R30
                 ; 0000 004A adjustSpeed(0);
000114 940e 01cd 	CALL SUBOPT_0x0
                 ; 0000 004B lcd_init(16);
000116 e1a0      	LDI  R26,LOW(16)
000117 940e 019e 	CALL _lcd_init
                 ; 0000 004C while (1)
                 _0xF:
                 ; 0000 004D     {
                 ; 0000 004E         if(PINB.2 == 0){
000119 99b2      	SBIC 0x16,2
00011a c004      	RJMP _0x12
                 ; 0000 004F             state = !state;
00011b 2fe1      	MOV  R30,R17
00011c 940e 01ed 	CALL __LNEGB1
00011e 2f1e      	MOV  R17,R30
                 ; 0000 0050         }
                 ; 0000 0051 
                 ; 0000 0052         if(state == true){
                 _0x12:
00011f 3011      	CPI  R17,1
000120 f431      	BRNE _0x13
                 ; 0000 0053             adjustSpeed(0);
000121 940e 01cd 	CALL SUBOPT_0x0
                 ; 0000 0054             display_messages("Start");
                +
000123 e0ad     +LDI R26 , LOW ( _0x14 + ( 0 ) )
000124 e0b5     +LDI R27 , HIGH ( _0x14 + ( 0 ) )
                 	__POINTW2MN _0x14,0
000125 df75      	RCALL _display_messages
                 ; 0000 0055         }else{
000126 c001      	RJMP _0x15
                 _0x13:
                 ; 0000 0056             dry();
000127 dfbf      	RCALL _dry
                 ; 0000 0057         }
                 _0x15:
                 ; 0000 0058         delay_ms(50);
000128 e3a2      	LDI  R26,LOW(50)
000129 e0b0      	LDI  R27,0
00012a 940e 01df 	CALL _delay_ms
                 ; 0000 0059     }
00012c cfec      	RJMP _0xF
                 ; 0000 005A }
                 _0x16:
00012d cfff      	RJMP _0x16
                 ; .FEND
                 
                 	.DSEG
                 _0x14:
00050d           	.BYTE 0x6
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
00012e 93aa      	ST   -Y,R26
00012f 81e8      	LD   R30,Y
000130 71e0      	ANDI R30,LOW(0x10)
000131 f011      	BREQ _0x2020004
000132 9adb      	SBI  0x1B,3
000133 c001      	RJMP _0x2020005
                 _0x2020004:
000134 98db      	CBI  0x1B,3
                 _0x2020005:
000135 81e8      	LD   R30,Y
000136 72e0      	ANDI R30,LOW(0x20)
000137 f011      	BREQ _0x2020006
000138 9adc      	SBI  0x1B,4
000139 c001      	RJMP _0x2020007
                 _0x2020006:
00013a 98dc      	CBI  0x1B,4
                 _0x2020007:
00013b 81e8      	LD   R30,Y
00013c 74e0      	ANDI R30,LOW(0x40)
00013d f011      	BREQ _0x2020008
00013e 9add      	SBI  0x1B,5
00013f c001      	RJMP _0x2020009
                 _0x2020008:
000140 98dd      	CBI  0x1B,5
                 _0x2020009:
000141 81e8      	LD   R30,Y
000142 78e0      	ANDI R30,LOW(0x80)
000143 f011      	BREQ _0x202000A
000144 9ade      	SBI  0x1B,6
000145 c001      	RJMP _0x202000B
                 _0x202000A:
000146 98de      	CBI  0x1B,6
                 _0x202000B:
                +
000147 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000148 958a     +DEC R24
000149 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00014a 9ada      	SBI  0x1B,2
                +
00014b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00014c 958a     +DEC R24
00014d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00014e 98da      	CBI  0x1B,2
                +
00014f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000150 958a     +DEC R24
000151 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000152 c078      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000153 93aa      	ST   -Y,R26
000154 81a8      	LD   R26,Y
000155 dfd8      	RCALL __lcd_write_nibble_G101
000156 81e8          ld    r30,y
000157 95e2          swap  r30
000158 83e8          st    y,r30
000159 81a8      	LD   R26,Y
00015a dfd3      	RCALL __lcd_write_nibble_G101
                +
00015b e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00015c 958a     +DEC R24
00015d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00015e c06c      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00015f 93aa      	ST   -Y,R26
000160 81e8      	LD   R30,Y
000161 e0f0      	LDI  R31,0
000162 5eed      	SUBI R30,LOW(-__base_y_G101)
000163 4ffa      	SBCI R31,HIGH(-__base_y_G101)
000164 81e0      	LD   R30,Z
000165 81a9      	LDD  R26,Y+1
000166 0fae      	ADD  R26,R30
000167 dfeb      	RCALL __lcd_write_data
000168 8079      	LDD  R7,Y+1
000169 8068      	LDD  R6,Y+0
                 _0x2080002:
00016a 9622      	ADIW R28,2
00016b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00016c e0a2      	LDI  R26,LOW(2)
00016d 940e 01d1 	CALL SUBOPT_0x1
00016f e0ac      	LDI  R26,LOW(12)
000170 dfe2      	RCALL __lcd_write_data
000171 e0a1      	LDI  R26,LOW(1)
000172 940e 01d1 	CALL SUBOPT_0x1
000174 e0e0      	LDI  R30,LOW(0)
000175 2e6e      	MOV  R6,R30
000176 2e7e      	MOV  R7,R30
000177 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000178 93aa      	ST   -Y,R26
000179 81a8      	LD   R26,Y
00017a 30aa      	CPI  R26,LOW(0xA)
00017b f011      	BREQ _0x2020011
00017c 1479      	CP   R7,R9
00017d f048      	BRLO _0x2020010
                 _0x2020011:
00017e e0e0      	LDI  R30,LOW(0)
00017f 93ea      	ST   -Y,R30
000180 9463      	INC  R6
000181 2da6      	MOV  R26,R6
000182 dfdc      	RCALL _lcd_gotoxy
000183 81a8      	LD   R26,Y
000184 30aa      	CPI  R26,LOW(0xA)
000185 f409      	BRNE _0x2020013
000186 c044      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
000187 9473      	INC  R7
000188 9ad8      	SBI  0x1B,0
000189 81a8      	LD   R26,Y
00018a dfc8      	RCALL __lcd_write_data
00018b 98d8      	CBI  0x1B,0
00018c c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00018d 93ba      	ST   -Y,R27
00018e 93aa      	ST   -Y,R26
00018f 931a      	ST   -Y,R17
                 _0x2020014:
000190 81a9      	LDD  R26,Y+1
000191 81ba      	LDD  R27,Y+1+1
000192 91ed      	LD   R30,X+
000193 83a9      	STD  Y+1,R26
000194 83ba      	STD  Y+1+1,R27
000195 2f1e      	MOV  R17,R30
000196 30e0      	CPI  R30,0
000197 f019      	BREQ _0x2020016
000198 2fa1      	MOV  R26,R17
000199 dfde      	RCALL _lcd_putchar
00019a cff5      	RJMP _0x2020014
                 _0x2020016:
00019b 8118      	LDD  R17,Y+0
00019c 9623      	ADIW R28,3
00019d 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00019e 93aa      	ST   -Y,R26
00019f 9ad3      	SBI  0x1A,3
0001a0 9ad4      	SBI  0x1A,4
0001a1 9ad5      	SBI  0x1A,5
0001a2 9ad6      	SBI  0x1A,6
0001a3 9ad2      	SBI  0x1A,2
0001a4 9ad0      	SBI  0x1A,0
0001a5 9ad1      	SBI  0x1A,1
0001a6 98da      	CBI  0x1B,2
0001a7 98d8      	CBI  0x1B,0
0001a8 98d9      	CBI  0x1B,1
0001a9 8098      	LDD  R9,Y+0
0001aa 81e8      	LD   R30,Y
0001ab 58e0      	SUBI R30,-LOW(128)
                +
0001ac 93e0 0515+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0001ae 81e8      	LD   R30,Y
0001af 54e0      	SUBI R30,-LOW(192)
                +
0001b0 93e0 0516+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0001b2 e1a4      	LDI  R26,LOW(20)
0001b3 e0b0      	LDI  R27,0
0001b4 940e 01df 	CALL _delay_ms
0001b6 940e 01d7 	CALL SUBOPT_0x2
0001b8 940e 01d7 	CALL SUBOPT_0x2
0001ba 940e 01d7 	CALL SUBOPT_0x2
0001bc e2a0      	LDI  R26,LOW(32)
0001bd df70      	RCALL __lcd_write_nibble_G101
                +
0001be ec88     +LDI R24 , LOW ( 200 )
0001bf e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001c0 9701     +SBIW R24 , 1
0001c1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001c2 e2a8      	LDI  R26,LOW(40)
0001c3 df8f      	RCALL __lcd_write_data
0001c4 e0a4      	LDI  R26,LOW(4)
0001c5 df8d      	RCALL __lcd_write_data
0001c6 e8a5      	LDI  R26,LOW(133)
0001c7 df8b      	RCALL __lcd_write_data
0001c8 e0a6      	LDI  R26,LOW(6)
0001c9 df89      	RCALL __lcd_write_data
0001ca dfa1      	RCALL _lcd_clear
                 _0x2080001:
0001cb 9621      	ADIW R28,1
0001cc 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G101:
000513           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001cd e0a0      	LDI  R26,LOW(0)
0001ce e0b0      	LDI  R27,0
0001cf 940c 00aa 	JMP  _adjustSpeed
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001d1 940e 0153 	CALL __lcd_write_data
0001d3 e0a3      	LDI  R26,LOW(3)
0001d4 e0b0      	LDI  R27,0
0001d5 940c 01df 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
0001d7 e3a0      	LDI  R26,LOW(48)
0001d8 940e 012e 	CALL __lcd_write_nibble_G101
                +
0001da ec88     +LDI R24 , LOW ( 200 )
0001db e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001dc 9701     +SBIW R24 , 1
0001dd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001de 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001df 9610      	adiw r26,0
0001e0 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001e1 ed80     +LDI R24 , LOW ( 0x7D0 )
0001e2 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001e3 9701     +SBIW R24 , 1
0001e4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001e5 95a8      	wdr
0001e6 9711      	sbiw r26,1
0001e7 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001e8 9508      	ret
                 
                 __ANEGW1:
0001e9 95f1      	NEG  R31
0001ea 95e1      	NEG  R30
0001eb 40f0      	SBCI R31,0
0001ec 9508      	RET
                 
                 __LNEGB1:
0001ed 23ee      	TST  R30
0001ee e0e1      	LDI  R30,1
0001ef f009      	BREQ __LNEGB1F
0001f0 27ee      	CLR  R30
                 __LNEGB1F:
0001f1 9508      	RET
                 
                 __DIVW21U:
0001f2 2400      	CLR  R0
0001f3 2411      	CLR  R1
0001f4 e190      	LDI  R25,16
                 __DIVW21U1:
0001f5 0faa      	LSL  R26
0001f6 1fbb      	ROL  R27
0001f7 1c00      	ROL  R0
0001f8 1c11      	ROL  R1
0001f9 1a0e      	SUB  R0,R30
0001fa 0a1f      	SBC  R1,R31
0001fb f418      	BRCC __DIVW21U2
0001fc 0e0e      	ADD  R0,R30
0001fd 1e1f      	ADC  R1,R31
0001fe c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001ff 60a1      	SBR  R26,1
                 __DIVW21U3:
000200 959a      	DEC  R25
000201 f799      	BRNE __DIVW21U1
000202 01fd      	MOVW R30,R26
000203 01d0      	MOVW R26,R0
000204 9508      	RET
                 
                 __DIVW21:
000205 d004      	RCALL __CHKSIGNW
000206 dfeb      	RCALL __DIVW21U
000207 f40e      	BRTC __DIVW211
000208 dfe0      	RCALL __ANEGW1
                 __DIVW211:
000209 9508      	RET
                 
                 __CHKSIGNW:
00020a 94e8      	CLT
00020b fff7      	SBRS R31,7
00020c c002      	RJMP __CHKSW1
00020d dfdb      	RCALL __ANEGW1
00020e 9468      	SET
                 __CHKSW1:
00020f ffb7      	SBRS R27,7
000210 c006      	RJMP __CHKSW2
000211 95a0      	COM  R26
000212 95b0      	COM  R27
000213 9611      	ADIW R26,1
000214 f800      	BLD  R0,0
000215 9403      	INC  R0
000216 fa00      	BST  R0,0
                 __CHKSW2:
000217 9508      	RET
                 
                 __SAVELOCR4:
000218 933a      	ST   -Y,R19
                 __SAVELOCR3:
000219 932a      	ST   -Y,R18
                 __SAVELOCR2:
00021a 931a      	ST   -Y,R17
00021b 930a      	ST   -Y,R16
00021c 9508      	RET
                 
                 __LOADLOCR4:
00021d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00021e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00021f 8119      	LDD  R17,Y+1
000220 8108      	LD   R16,Y
000221 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  14 r1 :   5 r2 :   0 r3 :   0 r4 :   9 r5 :   3 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  10 r17:  15 r18:   5 r19:   4 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  22 r25:   7 r26:  62 r27:  25 r28:   5 r29:   1 r30:  87 r31:  17 
x  :   4 y  :  58 z  :   8 
Registers used: 23 out of 35 (65.7%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   3 
adiw  :   6 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  10 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   1 brmi  :   0 brne  :  17 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  21 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   2 cpc   :   3 cpi   :   6 cpse  :   0 dec   :   6 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   0 inc   :   3 jmp   :  40 ld    :  20 ldd   :  15 
ldi   :  80 lds   :   0 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   8 
movw  :  14 mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   1 ori   :   0 out   :  14 pop   :   0 push  :   0 rcall :  23 
ret   :  15 reti  :   0 rjmp  :  21 rol   :   4 ror   :   0 sbc   :   1 
sbci  :   3 sbi   :  13 sbic  :   1 sbis  :   0 sbiw  :   8 sbr   :   1 
sbrc  :   0 sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  26 std   :   2 sts   :   3 sub   :   2 subi  :   4 
swap  :   1 tst   :   1 wdr   :   1 
Instructions used: 54 out of 117 (46.2%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000444   1018     74   1092  131072   0.8%
[.dseg] 0x000100 0x000517      0     23     23    4096   0.6%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 6 warnings
