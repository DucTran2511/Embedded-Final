
AVRASM ver. 2.1.30  C:\Code\Ex8\Debug\List\Ex8.asm Sat Dec 21 22:10:58 2024

C:\Code\Ex8\Debug\List\Ex8.asm(1090): warning: Register r5 already defined by the .DEF directive
C:\Code\Ex8\Debug\List\Ex8.asm(1091): warning: Register r4 already defined by the .DEF directive
C:\Code\Ex8\Debug\List\Ex8.asm(1092): warning: Register r7 already defined by the .DEF directive
C:\Code\Ex8\Debug\List\Ex8.asm(1093): warning: Register r6 already defined by the .DEF directive
C:\Code\Ex8\Debug\List\Ex8.asm(1094): warning: Register r9 already defined by the .DEF directive
C:\Code\Ex8\Debug\List\Ex8.asm(1095): warning: Register r10 already defined by the .DEF directive
C:\Code\Ex8\Debug\List\Ex8.asm(1096): warning: Register r11 already defined by the .DEF directive
C:\Code\Ex8\Debug\List\Ex8.asm(1097): warning: Register r12 already defined by the .DEF directive
C:\Code\Ex8\Debug\List\Ex8.asm(1098): warning: Register r13 already defined by the .DEF directive
C:\Code\Ex8\Debug\List\Ex8.asm(1099): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hour=R5
                 	.DEF _minute=R4
                 	.DEF _second=R7
                 	.DEF _feed_hour=R6
                 	.DEF _feed_minute=R9
                 	.DEF _d=R10
                 	.DEF _d_msb=R11
                 	.DEF _dem=R12
                 	.DEF _dem_msb=R13
                 	.DEF __lcd_x=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 009f 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004f 000c
000050 0e00      	.DB  0xC,0x0,0x0,0xE
                 
                 _0x0:
000051 6f43
000052 6e75
000053 6474
000054 776f      	.DB  0x43,0x6F,0x75,0x6E,0x74,0x64,0x6F,0x77
000055 3a6e
000056 2000
000057 0073
000058 6546      	.DB  0x6E,0x3A,0x0,0x20,0x73,0x0,0x46,0x65
000059 6465
00005a 5420
00005b 6d69
00005c 2165      	.DB  0x65,0x64,0x20,0x54,0x69,0x6D,0x65,0x21
00005d 2000
00005e 2020
00005f 2020
000060 2020      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000061 2020
000062 2020
000063 2020
000064 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000065 2020
C:\Code\Ex8\Debug\List\Ex8.asm(1160): warning: .cseg .db misalignment - padding zero byte
000066 0000      	.DB  0x20,0x20,0x0
                 _0x2000003:
000067 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000068 0004      	.DW  0x04
000069 0006      	.DW  0x06
00006a 009e      	.DW  __REG_VARS*2
                 
00006b 0002      	.DW  0x02
00006c 0500      	.DW  __base_y_G100
00006d 00ce      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00006e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006f 94f8      	CLI
000070 27ee      	CLR  R30
000071 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000072 e0f1      	LDI  R31,1
000073 bff5      	OUT  MCUCR,R31
000074 bfe5      	OUT  MCUCR,R30
000075 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000077 e08d      	LDI  R24,(14-2)+1
000078 e0a2      	LDI  R26,2
000079 27bb      	CLR  R27
                 __CLEAR_REG:
00007a 93ed      	ST   X+,R30
00007b 958a      	DEC  R24
00007c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007e e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007f e0a0      	LDI  R26,LOW(__SRAM_START)
000080 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000081 93ed      	ST   X+,R30
000082 9701      	SBIW R24,1
000083 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000084 ede0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000085 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000086 9185      	LPM  R24,Z+
000087 9195      	LPM  R25,Z+
000088 9700      	SBIW R24,0
000089 f061      	BREQ __GLOBAL_INI_END
00008a 91a5      	LPM  R26,Z+
00008b 91b5      	LPM  R27,Z+
00008c 9005      	LPM  R0,Z+
00008d 9015      	LPM  R1,Z+
00008e 01bf      	MOVW R22,R30
00008f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000090 9005      	LPM  R0,Z+
000091 920d      	ST   X+,R0
000092 9701      	SBIW R24,1
000093 f7e1      	BRNE __GLOBAL_INI_LOOP
000094 01fb      	MOVW R30,R22
000095 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000096 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000097 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000098 bfed      	OUT  SPL,R30
000099 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00009a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00009b e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00009c e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00009d 940c 00ee 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * Ex8.c
                 ; *
                 ; * Created: 12/21/2024 10:00:57 PM
                 ; * Author: ADMIN
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;// I2C Bus functions
                 ;#include <i2c.h>
                 ;
                 ;// DS1307 Real Time Clock functions
                 ;#include <ds1307.h>
                 ;
                 ;unsigned char hour, minute, second;
                 ;unsigned char feed_hour = 12, feed_minute = 14; // Thoi gian cho ca an
                 ;
                 ;int d;
                 ;unsigned int dem;
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0019 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00009f 93ea      	ST   -Y,R30
0000a0 93fa      	ST   -Y,R31
0000a1 b7ef      	IN   R30,SREG
0000a2 93ea      	ST   -Y,R30
                 ; 0000 001A     // Reinitialize Timer 0 value
                 ; 0000 001B     TCNT0 = 0x06;
0000a3 e0e6      	LDI  R30,LOW(6)
0000a4 bfe2      	OUT  0x32,R30
                 ; 0000 001C     ++dem;
0000a5 01f6      	MOVW R30,R12
0000a6 9631      	ADIW R30,1
0000a7 016f      	MOVW R12,R30
                 ; 0000 001D     if (dem == 1000) d = 1;
0000a8 eee8      	LDI  R30,LOW(1000)
0000a9 e0f3      	LDI  R31,HIGH(1000)
0000aa 15ec      	CP   R30,R12
0000ab 05fd      	CPC  R31,R13
0000ac f419      	BRNE _0x3
0000ad e0e1      	LDI  R30,LOW(1)
0000ae e0f0      	LDI  R31,HIGH(1)
0000af 015f      	MOVW R10,R30
                 ; 0000 001E     if (dem == 2000) {
                 _0x3:
0000b0 ede0      	LDI  R30,LOW(2000)
0000b1 e0f7      	LDI  R31,HIGH(2000)
0000b2 15ec      	CP   R30,R12
0000b3 05fd      	CPC  R31,R13
0000b4 f421      	BRNE _0x4
                 ; 0000 001F         dem = 0;
0000b5 24cc      	CLR  R12
0000b6 24dd      	CLR  R13
                 ; 0000 0020         d = 0; // d = 1/ 0 trong khoang 1s
0000b7 24aa      	CLR  R10
0000b8 24bb      	CLR  R11
                 ; 0000 0021     }
                 ; 0000 0022 }
                 _0x4:
0000b9 91e9      	LD   R30,Y+
0000ba bfef      	OUT  SREG,R30
0000bb 91f9      	LD   R31,Y+
0000bc 91e9      	LD   R30,Y+
0000bd 9518      	RETI
                 ; .FEND
                 ;
                 ;// Hien thi thoi gian hien tai tren LCD
                 ;void display_time_lcd() {
                 ; 0000 0025 void display_time_lcd() {
                 _display_time_lcd:
                 ; .FSTART _display_time_lcd
                 ; 0000 0026     lcd_gotoxy(0, 0);
0000be e0e0      	LDI  R30,LOW(0)
0000bf 93ea      	ST   -Y,R30
0000c0 e0a0      	LDI  R26,LOW(0)
0000c1 d0c9      	RCALL _lcd_gotoxy
                 ; 0000 0027     lcd_putchar((hour / 10) + '0');
0000c2 2da5      	MOV  R26,R5
0000c3 940e 0272 	CALL SUBOPT_0x0
                 ; 0000 0028     lcd_putchar((hour % 10) + '0');
0000c5 2da5      	MOV  R26,R5
0000c6 940e 027b 	CALL SUBOPT_0x1
                 ; 0000 0029     lcd_putchar(':');
                 ; 0000 002A     lcd_putchar((minute / 10) + '0');
0000c8 2da4      	MOV  R26,R4
0000c9 940e 0272 	CALL SUBOPT_0x0
                 ; 0000 002B     lcd_putchar((minute % 10) + '0');
0000cb 2da4      	MOV  R26,R4
0000cc 940e 027b 	CALL SUBOPT_0x1
                 ; 0000 002C     lcd_putchar(':');
                 ; 0000 002D     lcd_putchar((second / 10) + '0');
0000ce 2da7      	MOV  R26,R7
0000cf 940e 0272 	CALL SUBOPT_0x0
                 ; 0000 002E     lcd_putchar((second % 10) + '0');
0000d1 2da7      	MOV  R26,R7
0000d2 27bb      	CLR  R27
0000d3 940e 0287 	CALL SUBOPT_0x2
                 ; 0000 002F }
0000d5 9508      	RET
                 ; .FEND
                 ;
                 ;// Hien thi dem nguoc tren LCD
                 ;void countdown_display_lcd(int countdown) {
                 ; 0000 0032 void countdown_display_lcd(int countdown) {
                 _countdown_display_lcd:
                 ; .FSTART _countdown_display_lcd
                 ; 0000 0033     lcd_gotoxy(0, 1);
0000d6 93ba      	ST   -Y,R27
0000d7 93aa      	ST   -Y,R26
                 ;	countdown -> Y+0
0000d8 940e 028f 	CALL SUBOPT_0x3
                 ; 0000 0034     lcd_putsf("Countdown:");
                +
0000da eaa2     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000db e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000dc d0e4      	RCALL _lcd_putsf
                 ; 0000 0035     lcd_putchar((countdown / 10) + '0');
0000dd 81a8      	LD   R26,Y
0000de 81b9      	LDD  R27,Y+1
0000df e0ea      	LDI  R30,LOW(10)
0000e0 e0f0      	LDI  R31,HIGH(10)
0000e1 940e 032b 	CALL __DIVW21
0000e3 5de0      	SUBI R30,-LOW(48)
0000e4 2fae      	MOV  R26,R30
0000e5 d0c1      	RCALL _lcd_putchar
                 ; 0000 0036     lcd_putchar((countdown % 10) + '0');
0000e6 81a8      	LD   R26,Y
0000e7 81b9      	LDD  R27,Y+1
0000e8 940e 0287 	CALL SUBOPT_0x2
                 ; 0000 0037     lcd_putsf(" s");
                +
0000ea eaad     +LDI R26 , LOW ( 2 * _0x0 + ( 11 ) )
0000eb e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW2FN _0x0,11
0000ec d0d4      	RCALL _lcd_putsf
                 ; 0000 0038 }
0000ed c0aa      	RJMP _0x20C0004
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 003B {
                 _main:
                 ; .FSTART _main
                 ; 0000 003C     ASSR = 0 << AS0;
0000ee e0e0      	LDI  R30,LOW(0)
0000ef bfe0      	OUT  0x30,R30
                 ; 0000 003D     TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (1 << CS01) | (1 << CS00);
0000f0 e0e3      	LDI  R30,LOW(3)
0000f1 bfe3      	OUT  0x33,R30
                 ; 0000 003E     TCNT0 = 0x06;
0000f2 e0e6      	LDI  R30,LOW(6)
0000f3 bfe2      	OUT  0x32,R30
                 ; 0000 003F     OCR0 = 0x00;
0000f4 e0e0      	LDI  R30,LOW(0)
0000f5 bfe1      	OUT  0x31,R30
                 ; 0000 0040 
                 ; 0000 0041     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0042     TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << OCIE0) |  ...
0000f6 e0e1      	LDI  R30,LOW(1)
0000f7 bfe7      	OUT  0x37,R30
                 ; 0000 0043     ETIMSK = (0 << TICIE3) | (0 << OCIE3A) | (0 << OCIE3B) | (0 << TOIE3) | (0 << OCIE3C) | (0 << OCIE1C);
0000f8 e0e0      	LDI  R30,LOW(0)
0000f9 93e0 007d 	STS  125,R30
                 ; 0000 0044 
                 ; 0000 0045     i2c_init();
0000fb 940e 02b9 	CALL _i2c_init
                 ; 0000 0046     lcd_init(16);
0000fd e1a0      	LDI  R26,LOW(16)
0000fe d0d4      	RCALL _lcd_init
                 ; 0000 0047     rtc_init(3, 1, 0);
0000ff e0e3      	LDI  R30,LOW(3)
000100 93ea      	ST   -Y,R30
000101 e0e1      	LDI  R30,LOW(1)
000102 93ea      	ST   -Y,R30
000103 e0a0      	LDI  R26,LOW(0)
000104 940e 0203 	CALL _rtc_init
                 ; 0000 0048     rtc_set_time(12, 13, 50);
000106 e0ec      	LDI  R30,LOW(12)
000107 93ea      	ST   -Y,R30
000108 e0ed      	LDI  R30,LOW(13)
000109 93ea      	ST   -Y,R30
00010a e3a2      	LDI  R26,LOW(50)
00010b 940e 023f 	CALL _rtc_set_time
                 ; 0000 0049     #asm("sei")
00010d 9478      	sei
                 ; 0000 004A 
                 ; 0000 004B     while (1)
                 _0x5:
                 ; 0000 004C     {
                 ; 0000 004D         // Lay thoi gian hien tai
                 ; 0000 004E         rtc_get_time(&hour, &minute, &second);
00010e 940e 0294 	CALL SUBOPT_0x4
                 ; 0000 004F 
                 ; 0000 0050         // Hien thi thoi gian hien tai
                 ; 0000 0051         display_time_lcd();
000110 dfad      	RCALL _display_time_lcd
                 ; 0000 0052 
                 ; 0000 0053         // Kiem tra dem nguoc neu con 2 giay la den gio cho ca an
                 ; 0000 0054         if (hour == feed_hour && minute == feed_minute - 1 && second >= 58) {
000111 1465      	CP   R6,R5
000112 f459      	BRNE _0x9
000113 2de9      	MOV  R30,R9
000114 e0f0      	LDI  R31,0
000115 9731      	SBIW R30,1
000116 2da4      	MOV  R26,R4
000117 e0b0      	LDI  R27,0
000118 17ea      	CP   R30,R26
000119 07fb      	CPC  R31,R27
00011a f419      	BRNE _0x9
00011b e3ea      	LDI  R30,LOW(58)
00011c 167e      	CP   R7,R30
00011d f408      	BRSH _0xA
                 _0x9:
00011e c030      	RJMP _0x8
                 _0xA:
                 ; 0000 0055             int countdown = 60 - second;
                 ; 0000 0056             countdown_display_lcd(countdown);
00011f 9722      	SBIW R28,2
                 ;	countdown -> Y+0
000120 2de7      	MOV  R30,R7
000121 e0f0      	LDI  R31,0
000122 e3ac      	LDI  R26,LOW(60)
000123 e0b0      	LDI  R27,HIGH(60)
000124 940e 034c 	CALL __SWAPW12
000126 1bea      	SUB  R30,R26
000127 0bfb      	SBC  R31,R27
000128 83e8      	ST   Y,R30
000129 83f9      	STD  Y+1,R31
00012a 81a8      	LD   R26,Y
00012b 81b9      	LDD  R27,Y+1
00012c dfa9      	RCALL _countdown_display_lcd
                 ; 0000 0057             delay_ms(1000); // Cho 1 giay
00012d eea8      	LDI  R26,LOW(1000)
00012e e0b3      	LDI  R27,HIGH(1000)
00012f 940e 030a 	CALL _delay_ms
                 ; 0000 0058 
                 ; 0000 0059             // Hien thi thong bao "Feed Time!" trong 5 giay va cap nhat thoi gian lien tuc
                 ; 0000 005A             if (second == 59) {
000131 e3eb      	LDI  R30,LOW(59)
000132 15e7      	CP   R30,R7
000133 f4c9      	BRNE _0xB
                 ; 0000 005B                 unsigned char feed_timer = 0;
                 ; 0000 005C                 while (feed_timer < 5) {
000134 9721      	SBIW R28,1
000135 e0e0      	LDI  R30,LOW(0)
000136 83e8      	ST   Y,R30
                 ;	countdown -> Y+1
                 ;	feed_timer -> Y+0
                 _0xC:
000137 81a8      	LD   R26,Y
000138 30a5      	CPI  R26,LOW(0x5)
000139 f488      	BRSH _0xE
                 ; 0000 005D                     rtc_get_time(&hour, &minute, &second);
00013a 940e 0294 	CALL SUBOPT_0x4
                 ; 0000 005E                     lcd_clear();
00013c d05d      	RCALL _lcd_clear
                 ; 0000 005F                     display_time_lcd();
00013d df80      	RCALL _display_time_lcd
                 ; 0000 0060                     lcd_gotoxy(0, 1);
00013e 940e 028f 	CALL SUBOPT_0x3
                 ; 0000 0061                     lcd_putsf("Feed Time!");
                +
000140 eba0     +LDI R26 , LOW ( 2 * _0x0 + ( 14 ) )
000141 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW2FN _0x0,14
000142 d07e      	RCALL _lcd_putsf
                 ; 0000 0062                     delay_ms(1000); // Cap nhat moi 1 giay
000143 eea8      	LDI  R26,LOW(1000)
000144 e0b3      	LDI  R27,HIGH(1000)
000145 940e 030a 	CALL _delay_ms
                 ; 0000 0063                     feed_timer++;
000147 81e8      	LD   R30,Y
000148 5fef      	SUBI R30,-LOW(1)
000149 83e8      	ST   Y,R30
                 ; 0000 0064                 }
00014a cfec      	RJMP _0xC
                 _0xE:
                 ; 0000 0065                 lcd_clear();
00014b d04e      	RCALL _lcd_clear
                 ; 0000 0066             }
00014c 9621      	ADIW R28,1
                 ; 0000 0067         } else {
                 _0xB:
00014d 9622      	ADIW R28,2
00014e c005      	RJMP _0xF
                 _0x8:
                 ; 0000 0068             // Xoa dem nguoc khi chua den gio cho ca an
                 ; 0000 0069             lcd_gotoxy(0, 1);
00014f 940e 028f 	CALL SUBOPT_0x3
                 ; 0000 006A             lcd_putsf("                 ");
                +
000151 ebab     +LDI R26 , LOW ( 2 * _0x0 + ( 25 ) )
000152 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW2FN _0x0,25
000153 d06d      	RCALL _lcd_putsf
                 ; 0000 006B         }
                 _0xF:
                 ; 0000 006C 
                 ; 0000 006D         delay_ms(100); // Cho 100ms
000154 e6a4      	LDI  R26,LOW(100)
000155 e0b0      	LDI  R27,0
000156 940e 030a 	CALL _delay_ms
                 ; 0000 006E     }
000158 cfb5      	RJMP _0x5
                 ; 0000 006F }
                 _0x10:
000159 cfff      	RJMP _0x10
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00015a 93aa      	ST   -Y,R26
00015b 81e8      	LD   R30,Y
00015c 71e0      	ANDI R30,LOW(0x10)
00015d f011      	BREQ _0x2000004
00015e 9adb      	SBI  0x1B,3
00015f c001      	RJMP _0x2000005
                 _0x2000004:
000160 98db      	CBI  0x1B,3
                 _0x2000005:
000161 81e8      	LD   R30,Y
000162 72e0      	ANDI R30,LOW(0x20)
000163 f011      	BREQ _0x2000006
000164 9adc      	SBI  0x1B,4
000165 c001      	RJMP _0x2000007
                 _0x2000006:
000166 98dc      	CBI  0x1B,4
                 _0x2000007:
000167 81e8      	LD   R30,Y
000168 74e0      	ANDI R30,LOW(0x40)
000169 f011      	BREQ _0x2000008
00016a 9add      	SBI  0x1B,5
00016b c001      	RJMP _0x2000009
                 _0x2000008:
00016c 98dd      	CBI  0x1B,5
                 _0x2000009:
00016d 81e8      	LD   R30,Y
00016e 78e0      	ANDI R30,LOW(0x80)
00016f f011      	BREQ _0x200000A
000170 9ade      	SBI  0x1B,6
000171 c001      	RJMP _0x200000B
                 _0x200000A:
000172 98de      	CBI  0x1B,6
                 _0x200000B:
                +
000173 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000174 958a     +DEC R24
000175 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000176 9ada      	SBI  0x1B,2
                +
000177 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000178 958a     +DEC R24
000179 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00017a 98da      	CBI  0x1B,2
                +
00017b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00017c 958a     +DEC R24
00017d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00017e c082      	RJMP _0x20C0003
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00017f 93aa      	ST   -Y,R26
000180 81a8      	LD   R26,Y
000181 dfd8      	RCALL __lcd_write_nibble_G100
000182 81e8          ld    r30,y
000183 95e2          swap  r30
000184 83e8          st    y,r30
000185 81a8      	LD   R26,Y
000186 dfd3      	RCALL __lcd_write_nibble_G100
                +
000187 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000188 958a     +DEC R24
000189 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00018a c076      	RJMP _0x20C0003
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00018b 93aa      	ST   -Y,R26
00018c 81e8      	LD   R30,Y
00018d e0f0      	LDI  R31,0
00018e 50e0      	SUBI R30,LOW(-__base_y_G100)
00018f 4ffb      	SBCI R31,HIGH(-__base_y_G100)
000190 81e0      	LD   R30,Z
000191 81a9      	LDD  R26,Y+1
000192 0fae      	ADD  R26,R30
000193 dfeb      	RCALL __lcd_write_data
000194 8089      	LDD  R8,Y+1
000195 81e8      	LD   R30,Y
000196 93e0 0504 	STS  __lcd_y,R30
                 _0x20C0004:
000198 9622      	ADIW R28,2
000199 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00019a e0a2      	LDI  R26,LOW(2)
00019b 940e 02a0 	CALL SUBOPT_0x5
00019d e0ac      	LDI  R26,LOW(12)
00019e dfe0      	RCALL __lcd_write_data
00019f e0a1      	LDI  R26,LOW(1)
0001a0 940e 02a0 	CALL SUBOPT_0x5
0001a2 e0e0      	LDI  R30,LOW(0)
0001a3 93e0 0504 	STS  __lcd_y,R30
0001a5 2e8e      	MOV  R8,R30
0001a6 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001a7 93aa      	ST   -Y,R26
0001a8 81a8      	LD   R26,Y
0001a9 30aa      	CPI  R26,LOW(0xA)
0001aa f021      	BREQ _0x2000011
0001ab 91e0 0505 	LDS  R30,__lcd_maxx
0001ad 168e      	CP   R8,R30
0001ae f060      	BRLO _0x2000010
                 _0x2000011:
0001af e0e0      	LDI  R30,LOW(0)
0001b0 93ea      	ST   -Y,R30
0001b1 91a0 0504 	LDS  R26,__lcd_y
0001b3 5faf      	SUBI R26,-LOW(1)
0001b4 93a0 0504 	STS  __lcd_y,R26
0001b6 dfd4      	RCALL _lcd_gotoxy
0001b7 81a8      	LD   R26,Y
0001b8 30aa      	CPI  R26,LOW(0xA)
0001b9 f409      	BRNE _0x2000013
0001ba c046      	RJMP _0x20C0003
                 _0x2000013:
                 _0x2000010:
0001bb 9483      	INC  R8
0001bc 9ad8      	SBI  0x1B,0
0001bd 81a8      	LD   R26,Y
0001be dfc0      	RCALL __lcd_write_data
0001bf 98d8      	CBI  0x1B,0
0001c0 c040      	RJMP _0x20C0003
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0001c1 93ba      	ST   -Y,R27
0001c2 93aa      	ST   -Y,R26
0001c3 931a      	ST   -Y,R17
                 _0x2000017:
0001c4 81e9      	LDD  R30,Y+1
0001c5 81fa      	LDD  R31,Y+1+1
0001c6 9631      	ADIW R30,1
0001c7 83e9      	STD  Y+1,R30
0001c8 83fa      	STD  Y+1+1,R31
0001c9 9731      	SBIW R30,1
0001ca 91e4      	LPM  R30,Z
0001cb 2f1e      	MOV  R17,R30
0001cc 30e0      	CPI  R30,0
0001cd f019      	BREQ _0x2000019
0001ce 2fa1      	MOV  R26,R17
0001cf dfd7      	RCALL _lcd_putchar
0001d0 cff3      	RJMP _0x2000017
                 _0x2000019:
0001d1 8118      	LDD  R17,Y+0
0001d2 c086      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001d3 93aa      	ST   -Y,R26
0001d4 9ad3      	SBI  0x1A,3
0001d5 9ad4      	SBI  0x1A,4
0001d6 9ad5      	SBI  0x1A,5
0001d7 9ad6      	SBI  0x1A,6
0001d8 9ad2      	SBI  0x1A,2
0001d9 9ad0      	SBI  0x1A,0
0001da 9ad1      	SBI  0x1A,1
0001db 98da      	CBI  0x1B,2
0001dc 98d8      	CBI  0x1B,0
0001dd 98d9      	CBI  0x1B,1
0001de 81e8      	LD   R30,Y
0001df 93e0 0505 	STS  __lcd_maxx,R30
0001e1 58e0      	SUBI R30,-LOW(128)
                +
0001e2 93e0 0502+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001e4 81e8      	LD   R30,Y
0001e5 54e0      	SUBI R30,-LOW(192)
                +
0001e6 93e0 0503+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001e8 e1a4      	LDI  R26,LOW(20)
0001e9 e0b0      	LDI  R27,0
0001ea 940e 030a 	CALL _delay_ms
0001ec 940e 02a6 	CALL SUBOPT_0x6
0001ee 940e 02a6 	CALL SUBOPT_0x6
0001f0 940e 02a6 	CALL SUBOPT_0x6
0001f2 e2a0      	LDI  R26,LOW(32)
0001f3 df66      	RCALL __lcd_write_nibble_G100
                +
0001f4 ec88     +LDI R24 , LOW ( 200 )
0001f5 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001f6 9701     +SBIW R24 , 1
0001f7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001f8 e2a8      	LDI  R26,LOW(40)
0001f9 df85      	RCALL __lcd_write_data
0001fa e0a4      	LDI  R26,LOW(4)
0001fb df83      	RCALL __lcd_write_data
0001fc e8a5      	LDI  R26,LOW(133)
0001fd df81      	RCALL __lcd_write_data
0001fe e0a6      	LDI  R26,LOW(6)
0001ff df7f      	RCALL __lcd_write_data
000200 df99      	RCALL _lcd_clear
                 _0x20C0003:
000201 9621      	ADIW R28,1
000202 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _rtc_init:
                 ; .FSTART _rtc_init
000203 93aa      	ST   -Y,R26
000204 81ea      	LDD  R30,Y+2
000205 70e3      	ANDI R30,LOW(0x3)
000206 83ea      	STD  Y+2,R30
000207 81e9      	LDD  R30,Y+1
000208 30e0      	CPI  R30,0
000209 f019      	BREQ _0x2040003
00020a 81ea      	LDD  R30,Y+2
00020b 61e0      	ORI  R30,0x10
00020c 83ea      	STD  Y+2,R30
                 _0x2040003:
00020d 81e8      	LD   R30,Y
00020e 30e0      	CPI  R30,0
00020f f019      	BREQ _0x2040004
000210 81ea      	LDD  R30,Y+2
000211 68e0      	ORI  R30,0x80
000212 83ea      	STD  Y+2,R30
                 _0x2040004:
000213 940e 02ae 	CALL SUBOPT_0x7
000215 e0a7      	LDI  R26,LOW(7)
000216 940e 02f2 	CALL _i2c_write
000218 81aa      	LDD  R26,Y+2
000219 c03b      	RJMP _0x20C0001
                 ; .FEND
                 _rtc_get_time:
                 ; .FSTART _rtc_get_time
00021a 93ba      	ST   -Y,R27
00021b 93aa      	ST   -Y,R26
00021c 940e 02ae 	CALL SUBOPT_0x7
00021e e0a0      	LDI  R26,LOW(0)
00021f 940e 02f2 	CALL _i2c_write
000221 940e 02cd 	CALL _i2c_stop
000223 940e 02be 	CALL _i2c_start
000225 eda1      	LDI  R26,LOW(209)
000226 940e 02f2 	CALL _i2c_write
000228 940e 02b3 	CALL SUBOPT_0x8
00022a 81a8      	LD   R26,Y
00022b 81b9      	LDD  R27,Y+1
00022c 93ec      	ST   X,R30
00022d 940e 02b3 	CALL SUBOPT_0x8
00022f 81aa      	LDD  R26,Y+2
000230 81bb      	LDD  R27,Y+2+1
000231 93ec      	ST   X,R30
000232 e0a0      	LDI  R26,LOW(0)
000233 940e 02d7 	CALL _i2c_read
000235 2fae      	MOV  R26,R30
000236 940e 025b 	CALL _bcd2bin
000238 81ac      	LDD  R26,Y+4
000239 81bd      	LDD  R27,Y+4+1
00023a 93ec      	ST   X,R30
00023b 940e 02cd 	CALL _i2c_stop
00023d 9626      	ADIW R28,6
00023e 9508      	RET
                 ; .FEND
                 _rtc_set_time:
                 ; .FSTART _rtc_set_time
00023f 93aa      	ST   -Y,R26
000240 940e 02ae 	CALL SUBOPT_0x7
000242 e0a0      	LDI  R26,LOW(0)
000243 940e 02f2 	CALL _i2c_write
000245 81a8      	LD   R26,Y
000246 940e 0268 	CALL _bin2bcd
000248 2fae      	MOV  R26,R30
000249 940e 02f2 	CALL _i2c_write
00024b 81a9      	LDD  R26,Y+1
00024c 940e 0268 	CALL _bin2bcd
00024e 2fae      	MOV  R26,R30
00024f 940e 02f2 	CALL _i2c_write
000251 81aa      	LDD  R26,Y+2
000252 940e 0268 	CALL _bin2bcd
000254 2fae      	MOV  R26,R30
                 _0x20C0001:
000255 940e 02f2 	CALL _i2c_write
000257 940e 02cd 	CALL _i2c_stop
                 _0x20C0002:
000259 9623      	ADIW R28,3
00025a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _bcd2bin:
                 ; .FSTART _bcd2bin
00025b 93aa      	ST   -Y,R26
00025c 81e8          ld   r30,y
00025d 95e2          swap r30
00025e 70ef          andi r30,0xf
00025f 2fae          mov  r26,r30
000260 0faa          lsl  r26
000261 0faa          lsl  r26
000262 0fea          add  r30,r26
000263 0fee          lsl  r30
000264 91a9          ld   r26,y+
000265 70af          andi r26,0xf
000266 0fea          add  r30,r26
000267 9508          ret
                 ; .FEND
                 _bin2bcd:
                 ; .FSTART _bin2bcd
000268 93aa      	ST   -Y,R26
000269 91a9          ld   r26,y+
00026a 27ee          clr  r30
                 bin2bcd0:
00026b 50aa          subi r26,10
00026c f012          brmi bin2bcd1
00026d 5fe0          subi r30,-16
00026e cffc          rjmp bin2bcd0
                 bin2bcd1:
00026f 5fa6          subi r26,-10
000270 0fea          add  r30,r26
000271 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000500           	.BYTE 0x4
                 __lcd_y:
000504           	.BYTE 0x1
                 __lcd_maxx:
000505           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x0:
000272 e0b0      	LDI  R27,0
000273 e0ea      	LDI  R30,LOW(10)
000274 e0f0      	LDI  R31,HIGH(10)
000275 940e 032b 	CALL __DIVW21
000277 5de0      	SUBI R30,-LOW(48)
000278 2fae      	MOV  R26,R30
000279 940c 01a7 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
00027b 27bb      	CLR  R27
00027c e0ea      	LDI  R30,LOW(10)
00027d e0f0      	LDI  R31,HIGH(10)
00027e 940e 0330 	CALL __MODW21
000280 5de0      	SUBI R30,-LOW(48)
000281 2fae      	MOV  R26,R30
000282 940e 01a7 	CALL _lcd_putchar
000284 e3aa      	LDI  R26,LOW(58)
000285 940c 01a7 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000287 e0ea      	LDI  R30,LOW(10)
000288 e0f0      	LDI  R31,HIGH(10)
000289 940e 0330 	CALL __MODW21
00028b 5de0      	SUBI R30,-LOW(48)
00028c 2fae      	MOV  R26,R30
00028d 940c 01a7 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
00028f e0e0      	LDI  R30,LOW(0)
000290 93ea      	ST   -Y,R30
000291 e0a1      	LDI  R26,LOW(1)
000292 940c 018b 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000294 e0e5      	LDI  R30,LOW(5)
000295 e0f0      	LDI  R31,HIGH(5)
000296 93fa      	ST   -Y,R31
000297 93ea      	ST   -Y,R30
000298 e0e4      	LDI  R30,LOW(4)
000299 e0f0      	LDI  R31,HIGH(4)
00029a 93fa      	ST   -Y,R31
00029b 93ea      	ST   -Y,R30
00029c e0a7      	LDI  R26,LOW(7)
00029d e0b0      	LDI  R27,HIGH(7)
00029e 940c 021a 	JMP  _rtc_get_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0002a0 940e 017f 	CALL __lcd_write_data
0002a2 e0a3      	LDI  R26,LOW(3)
0002a3 e0b0      	LDI  R27,0
0002a4 940c 030a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
0002a6 e3a0      	LDI  R26,LOW(48)
0002a7 940e 015a 	CALL __lcd_write_nibble_G100
                +
0002a9 ec88     +LDI R24 , LOW ( 200 )
0002aa e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002ab 9701     +SBIW R24 , 1
0002ac f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0002ae 940e 02be 	CALL _i2c_start
0002b0 eda0      	LDI  R26,LOW(208)
0002b1 940c 02f2 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0002b3 e0a1      	LDI  R26,LOW(1)
0002b4 940e 02d7 	CALL _i2c_read
0002b6 2fae      	MOV  R26,R30
0002b7 940c 025b 	JMP  _bcd2bin
                 
                 
                 	.CSEG
                 	.equ __sda_bit=7
                 	.equ __scl_bit=6
                 	.equ __i2c_port=0x03 ;PORTE
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
0002b9 981e      	cbi  __i2c_port,__scl_bit
0002ba 981f      	cbi  __i2c_port,__sda_bit
0002bb 9a16      	sbi  __i2c_dir,__scl_bit
0002bc 9817      	cbi  __i2c_dir,__sda_bit
0002bd c015      	rjmp __i2c_delay2
                 _i2c_start:
0002be 9817      	cbi  __i2c_dir,__sda_bit
0002bf 9816      	cbi  __i2c_dir,__scl_bit
0002c0 27ee      	clr  r30
0002c1 0000      	nop
0002c2 9b0f      	sbis __i2c_pin,__sda_bit
0002c3 9508      	ret
0002c4 9b0e      	sbis __i2c_pin,__scl_bit
0002c5 9508      	ret
0002c6 d004      	rcall __i2c_delay1
0002c7 9a17      	sbi  __i2c_dir,__sda_bit
0002c8 d002      	rcall __i2c_delay1
0002c9 9a16      	sbi  __i2c_dir,__scl_bit
0002ca e0e1      	ldi  r30,1
                 __i2c_delay1:
0002cb e06d      	ldi  r22,13
0002cc c007      	rjmp __i2c_delay2l
                 _i2c_stop:
0002cd 9a17      	sbi  __i2c_dir,__sda_bit
0002ce 9a16      	sbi  __i2c_dir,__scl_bit
0002cf d003      	rcall __i2c_delay2
0002d0 9816      	cbi  __i2c_dir,__scl_bit
0002d1 dff9      	rcall __i2c_delay1
0002d2 9817      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
0002d3 e16b      	ldi  r22,27
                 __i2c_delay2l:
0002d4 956a      	dec  r22
0002d5 f7f1      	brne __i2c_delay2l
0002d6 9508      	ret
                 _i2c_read:
0002d7 e078      	ldi  r23,8
                 __i2c_read0:
0002d8 9816      	cbi  __i2c_dir,__scl_bit
0002d9 dff1      	rcall __i2c_delay1
                 __i2c_read3:
0002da 9b0e      	sbis __i2c_pin,__scl_bit
0002db cffe      	rjmp __i2c_read3
0002dc dfee      	rcall __i2c_delay1
0002dd 9488      	clc
0002de 990f      	sbic __i2c_pin,__sda_bit
0002df 9408      	sec
0002e0 9a16      	sbi  __i2c_dir,__scl_bit
0002e1 dff1      	rcall __i2c_delay2
0002e2 1fee      	rol  r30
0002e3 957a      	dec  r23
0002e4 f799      	brne __i2c_read0
0002e5 2f7a      	mov  r23,r26
0002e6 2377      	tst  r23
0002e7 f411      	brne __i2c_read1
0002e8 9817      	cbi  __i2c_dir,__sda_bit
0002e9 c001      	rjmp __i2c_read2
                 __i2c_read1:
0002ea 9a17      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0002eb dfdf      	rcall __i2c_delay1
0002ec 9816      	cbi  __i2c_dir,__scl_bit
0002ed dfe5      	rcall __i2c_delay2
0002ee 9a16      	sbi  __i2c_dir,__scl_bit
0002ef dfdb      	rcall __i2c_delay1
0002f0 9817      	cbi  __i2c_dir,__sda_bit
0002f1 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
0002f2 e078      	ldi  r23,8
                 __i2c_write0:
0002f3 0faa      	lsl  r26
0002f4 f410      	brcc __i2c_write1
0002f5 9817      	cbi  __i2c_dir,__sda_bit
0002f6 c001      	rjmp __i2c_write2
                 __i2c_write1:
0002f7 9a17      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0002f8 dfda      	rcall __i2c_delay2
0002f9 9816      	cbi  __i2c_dir,__scl_bit
0002fa dfd0      	rcall __i2c_delay1
                 __i2c_write3:
0002fb 9b0e      	sbis __i2c_pin,__scl_bit
0002fc cffe      	rjmp __i2c_write3
0002fd dfcd      	rcall __i2c_delay1
0002fe 9a16      	sbi  __i2c_dir,__scl_bit
0002ff 957a      	dec  r23
000300 f791      	brne __i2c_write0
000301 9817      	cbi  __i2c_dir,__sda_bit
000302 dfc8      	rcall __i2c_delay1
000303 9816      	cbi  __i2c_dir,__scl_bit
000304 dfce      	rcall __i2c_delay2
000305 e0e1      	ldi  r30,1
000306 990f      	sbic __i2c_pin,__sda_bit
000307 27ee      	clr  r30
000308 9a16      	sbi  __i2c_dir,__scl_bit
000309 cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
00030a 9610      	adiw r26,0
00030b f039      	breq __delay_ms1
                 __delay_ms0:
                +
00030c ed80     +LDI R24 , LOW ( 0x7D0 )
00030d e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00030e 9701     +SBIW R24 , 1
00030f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000310 95a8      	wdr
000311 9711      	sbiw r26,1
000312 f7c9      	brne __delay_ms0
                 __delay_ms1:
000313 9508      	ret
                 
                 __ANEGW1:
000314 95f1      	NEG  R31
000315 95e1      	NEG  R30
000316 40f0      	SBCI R31,0
000317 9508      	RET
                 
                 __DIVW21U:
000318 2400      	CLR  R0
000319 2411      	CLR  R1
00031a e190      	LDI  R25,16
                 __DIVW21U1:
00031b 0faa      	LSL  R26
00031c 1fbb      	ROL  R27
00031d 1c00      	ROL  R0
00031e 1c11      	ROL  R1
00031f 1a0e      	SUB  R0,R30
000320 0a1f      	SBC  R1,R31
000321 f418      	BRCC __DIVW21U2
000322 0e0e      	ADD  R0,R30
000323 1e1f      	ADC  R1,R31
000324 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000325 60a1      	SBR  R26,1
                 __DIVW21U3:
000326 959a      	DEC  R25
000327 f799      	BRNE __DIVW21U1
000328 01fd      	MOVW R30,R26
000329 01d0      	MOVW R26,R0
00032a 9508      	RET
                 
                 __DIVW21:
00032b d012      	RCALL __CHKSIGNW
00032c dfeb      	RCALL __DIVW21U
00032d f40e      	BRTC __DIVW211
00032e dfe5      	RCALL __ANEGW1
                 __DIVW211:
00032f 9508      	RET
                 
                 __MODW21:
000330 94e8      	CLT
000331 ffb7      	SBRS R27,7
000332 c004      	RJMP __MODW211
000333 95a0      	COM  R26
000334 95b0      	COM  R27
000335 9611      	ADIW R26,1
000336 9468      	SET
                 __MODW211:
000337 fdf7      	SBRC R31,7
000338 dfdb      	RCALL __ANEGW1
000339 dfde      	RCALL __DIVW21U
00033a 01fd      	MOVW R30,R26
00033b f40e      	BRTC __MODW212
00033c dfd7      	RCALL __ANEGW1
                 __MODW212:
00033d 9508      	RET
                 
                 __CHKSIGNW:
00033e 94e8      	CLT
00033f fff7      	SBRS R31,7
000340 c002      	RJMP __CHKSW1
000341 dfd2      	RCALL __ANEGW1
000342 9468      	SET
                 __CHKSW1:
000343 ffb7      	SBRS R27,7
000344 c006      	RJMP __CHKSW2
000345 95a0      	COM  R26
000346 95b0      	COM  R27
000347 9611      	ADIW R26,1
000348 f800      	BLD  R0,0
000349 9403      	INC  R0
00034a fa00      	BST  R0,0
                 __CHKSW2:
00034b 9508      	RET
                 
                 __SWAPW12:
00034c 2e1b      	MOV  R1,R27
00034d 2fbf      	MOV  R27,R31
00034e 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00034f 2e1a      	MOV  R1,R26
000350 2fae      	MOV  R26,R30
000351 2de1      	MOV  R30,R1
000352 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  12 r1 :   9 r2 :   0 r3 :   0 r4 :   3 r5 :   3 r6 :   1 r7 :   5 
r8 :   4 r9 :   1 r10:   2 r11:   1 r12:   5 r13:   3 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   5 r23:   6 
r24:  22 r25:   7 r26: 117 r27:  36 r28:   9 r29:   1 r30: 167 r31:  35 
x  :   6 y  :  88 z  :   9 
Registers used: 26 out of 35 (74.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   5 
adiw  :  11 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  10 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   1 brne  :  22 brpl  :   0 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  55 
cbi   :  24 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   7 cpc   :   3 cpi   :   6 cpse  :   0 dec   :   9 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   1 inc   :   2 jmp   :  44 ld    :  29 ldd   :  20 
ldi   : 115 lds   :   2 lpm   :   9 lsl   :   5 lsr   :   0 mov   :  29 
movw  :   9 mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   1 
or    :   0 ori   :   2 out   :  13 pop   :   0 push  :   0 rcall :  47 
ret   :  19 reti  :   1 rjmp  :  31 rol   :   4 ror   :   0 sbc   :   2 
sbci  :   2 sbi   :  24 sbic  :   2 sbis  :   4 sbiw  :  11 sbr   :   1 
sbrc  :   1 sbrs  :   3 sec   :   1 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  40 std   :   6 sts   :   8 sub   :   2 subi  :  12 
swap  :   2 tst   :   1 wdr   :   1 
Instructions used: 64 out of 117 (54.7%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006a6   1620     82   1702  131072   1.3%
[.dseg] 0x000100 0x000506      0      6      6    4096   0.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 11 warnings
